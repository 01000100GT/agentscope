
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will present the argument that when circle A, which has a radius one-third of circle B, rolls around the outside of circle B without sliding, it will complete 4 full revolutions by the time it returns to its starting point.

    To understand this, let's consider the geometry and the relationship between the two circles. The circumference of a circle is given by \(2\pi r\), where \(r\) is the radius. If we denote the radius of circle A as \(r_A\) and the radius of circle B as \(r_B\), then according to the problem, \(r_A = \frac{1}{3}r_B\).

    The distance that circle A travels as it goes around circle B is equal to the circumference of the path it follows, which is the circumference of a circle with a radius equal to the sum of the radii of both circles, i.e., \(r_A + r_B\). Therefore, the distance traveled by the center of circle A is:

    \[ \text{Distance} = 2\pi (r_A + r_B) \]

    Since \(r_A = \frac{1}{3}r_B\), we can substitute and get:

    \[ \text{Distance} = 2\pi \left(\frac{1}{3}r_B + r_B\right) = 2\pi \left(\frac{4}{3}r_B\right) = \frac{8\pi r_B}{3} \]

    The number of revolutions circle A makes is the total distance traveled divided by the circumference of circle A itself, which is \(2\pi r_A\):

    \[ \text{Revolutions} = \frac{\text{Distance}}{2\pi r_A} = \frac{\frac{8\pi r_B}{3}}{2\pi \left(\frac{1}{3}r_B\right)} = \frac{\frac{8\pi r_B}{3}}{\frac{2\pi r_B}{3}} = \frac{8\pi r_B}{3} \times \frac{3}{2\pi r_B} = 4 \]

    Thus, circle A will make 4 revolutions as it rolls around circle B once.
    Bob: I appreciate the detailed explanation from the affirmative side, but I must disagree with the conclusion. The key point that is being overlooked is that as circle A rolls around the outside of circle B, it not only travels the distance equal to the circumference of the path (which is indeed \(2\pi (r_A + r_B)\)) but also rotates due to its own movement along this path.

    Let's break down the motion:

    1. **Translation**: Circle A moves a distance equal to the circumference of the path, which is \(2\pi (r_A + r_B)\).
    2. **Rotation**: As it rolls without sliding, for every full rotation, it covers a distance equal to its own circumference, \(2\pi r_A\).

    The number of rotations (or revolutions) circle A makes is the total distance traveled by the center of circle A divided by the circumference of circle A:

    \[      ext{Revolutions} = \frac{2\pi (r_A + r_B)}{2\pi r_A} = \frac{r_A + r_B}{r_A} \]

    Given that \(r_A = \frac{1}{3}r_B\), we can substitute and simplify:

    \[      ext{Revolutions} = \frac{\frac{1}{3}r_B + r_B}{\frac{1}{3}r_B} = \frac{\frac{4}{3}r_B}{\frac{1}{3}r_B} = 4 \]

    However, this calculation only accounts for the translation. Since circle A is rolling, we must add one more revolution to account for the fact that as it goes around, it also completes an additional turn on its axis. This is because when you roll a circle around another, it will make one extra revolution due to the curvature of the path.

    Therefore, the correct number of revolutions is 4 (from the distance traveled) plus 1 (the extra turn due to the curvature):

    \[      ext{Total Revolutions} = 4 + 1 = 5 \]

    In conclusion, circle A will actually make 5 full revolutions as it rolls around circle B once.
    Aggregator: The debate has concluded, and we have heard both arguments. Alice correctly calculated that the number of revolutions based on the distance traveled by the center of circle A is 4. However, Bob pointed out an important detail: when a circle rolls around another without sliding, it also completes an additional revolution due to the curvature of the path. This means that for every complete trip around, there is one extra turn. Therefore, the total number of revolutions is 4 (from the distance) plus 1 (the extra turn), which equals 5.

    Thus, the correct answer is that circle A will make 5 full revolutions as it rolls around circle B once. The negative side, represented by Bob, presented the correct argument and conclusion.

    The debate is finished, and the correct answer is:  5




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 5.078 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
