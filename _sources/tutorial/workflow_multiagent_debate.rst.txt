
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will present the argument that when circle A, with a radius 1/3 of that of circle B, rolls around the outside of circle B without sliding, it will revolve 4 times in total to return to its starting point.

    To understand this, let's break down the problem:

    - Let the radius of circle B be \( R \).
    - The radius of circle A is then \( \frac{1}{3}R \).

    When circle A rolls around the circumference of circle B, it will travel a distance equal to the circumference of the path it follows. This path is a circle with a radius equal to the sum of the radii of both circles, which is \( R + \frac{1}{3}R = \frac{4}{3}R \). Therefore, the length of the path (circumference) that circle A travels is \( 2\pi \times \frac{4}{3}R = \frac{8\pi R}{3} \).

    The number of revolutions circle A makes is the distance it travels divided by its own circumference. The circumference of circle A is \( 2\pi \times \frac{1}{3}R = \frac{2\pi R}{3} \).

    Hence, the number of revolutions is:
    \[ \frac{\text{Distance traveled}}{\text{Circumference of circle A}} = \frac{\frac{8\pi R}{3}}{\frac{2\pi R}{3}} = \frac{8\pi R}{3} \times \frac{3}{2\pi R} = 4 \]

    Therefore, circle A will revolve 4 times as it rolls around circle B and returns to its starting position.
    Bob: I appreciate the clear explanation provided by the affirmative side, but I must point out a subtle yet crucial aspect of the problem that leads to a different conclusion. When circle A rolls around circle B without sliding, it does not only revolve due to the path it travels along the circumference of the larger circle B; it also rotates about its own center as it moves.

    Let's revisit the calculations with this in mind:

    - The radius of circle B is \( R \).
    - The radius of circle A is \( \frac{1}{3}R \).

    When circle A rolls around the outside of circle B, it indeed travels a distance equal to the circumference of the path, which is \( 2\pi \times \left(R + \frac{1}{3}R\right) = 2\pi \times \frac{4}{3}R = \frac{8\pi R}{3} \).

    However, we need to consider that for every full rotation (or revolution) of circle A, it covers a distance equal to its own circumference, which is \( 2\pi \times \frac{1}{3}R = \frac{2\pi R}{3} \). To find out how many of these revolutions fit into the total distance traveled, we divide the total distance by the circumference of circle A:

    \[ \text{Number of revolutions} = \frac{\text{Total distance}}{\text{Circumference of circle A}} = \frac{\frac{8\pi R}{3}}{\frac{2\pi R}{3}} = 4 \]

    This calculation, however, only accounts for the linear displacement of circle A. We must also account for the fact that as circle A rolls around circle B, it makes an additional revolution because it has to rotate once more to align with its starting orientation after completing the loop around circle B. This is known as the "extra turn" or "gear paradox."

    Therefore, the total number of revolutions is actually 4 (from the linear displacement) plus 1 (the extra turn), which gives us a total of 5 revolutions. Hence, when circle A completes one trip around circle B, it will have revolved 5 times in total.
    Aggregator: The debate has concluded with both sides presenting their arguments. Alice's argument considered the number of revolutions based on the distance traveled by circle A, which is 4. Bob added a crucial point about the 'extra turn' or 'gear paradox,' which means that as circle A rolls around and returns to its starting point, it makes an additional revolution to align with its original orientation.

    Considering this, the total number of revolutions is indeed 4 (from the linear displacement) plus 1 (the extra turn), totaling 5. Therefore, the correct answer is that circle A will revolve 5 times in total as it rolls around circle B and returns to its starting position.

    The debate is finished, and the correct answer is:  5




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 2.015 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
