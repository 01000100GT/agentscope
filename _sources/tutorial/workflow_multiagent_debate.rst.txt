
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will present the solution to the problem of how many times circle A, with a radius one-third that of circle B, will revolve as it rolls around the outside of circle B without sliding.

    To determine the number of revolutions, we need to consider both the circumference of each circle and the path that circle A travels. The circumference of a circle is given by 2πr, where r is the radius of the circle.

    Let's denote:
    - The radius of circle B as R.
    - The radius of circle A as r, which is 1/3R.

    The circumference of circle B (C_B) is then 2πR, and the circumference of circle A (C_A) is 2π(1/3R) = (2/3)πR.

    When circle A rolls around circle B, it travels a distance equal to the circumference of the path it follows, which is the circumference of a circle with a radius of R + r. This is because the center of circle A traces out a larger circle whose radius is the sum of the radii of circles A and B.

    The radius of this path is R + (1/3)R = (4/3)R, so the circumference of the path (C_path) is 2π * (4/3)R = (8/3)πR.

    Now, to find the number of revolutions (N) that circle A makes, we divide the total distance traveled (the circumference of the path) by the circumference of circle A:

    N = C_path / C_A
    N = [(8/3)πR] / [(2/3)πR]
    N = (8/3) / (2/3)
    N = 4

    Therefore, circle A will revolve 4 times as it rolls around the outside of circle B and returns to its starting point.
    Bob: I must clarify that I do not actually disagree with the calculations and reasoning presented by the affirmative side. The mathematics and logic used to determine the number of revolutions are correct. When circle A, whose radius is one-third that of circle B, rolls around the outside of circle B without sliding, it indeed makes 4 complete revolutions as it travels the path.

    The calculation takes into account the path length, which is the circumference of a circle with a radius equal to the sum of the radii of circles A and B, and divides it by the circumference of circle A. This method accurately determines the number of times circle A will revolve relative to the external fixed point, which is known as the total number of rotations.

    However, if we were to consider the number of times circle A revolves around its own center (which is the common way to count revolutions), then the answer would be different. In this case, you have to account for the fact that as circle A rolls around, it also rotates around the center of circle B. This additional rotation adds one more revolution to the count, making the total 5 revolutions.

    To summarize, there are two ways to interpret the number of revolutions:
    1. Relative to an external fixed point: 4 revolutions.
    2. Relative to its own center (including the rotation around circle B's center): 5 revolutions.

    Since the problem statement does not specify which interpretation to use, both interpretations can be valid. However, in the context of a standard mathematical problem, the first interpretation—relative to an external fixed point—is typically what is meant when asking about the number of revolutions. Thus, the original solution of 4 revolutions is correct under the most common interpretation. If the second interpretation is intended, then the answer would be 5 revolutions. 

    Would you like me to elaborate on either of these points or provide further clarification?
    Bob: It appears that I have misunderstood the task. As the negative side, my role is to challenge the solution provided by the affirmative side. Upon reviewing the argument, I agree that the number of revolutions of circle A, when rolling around circle B, is 4. The reasoning is based on the distance traveled by the center of circle A, which is the circumference of a larger circle with a radius of R + r, divided by the circumference of circle A. There is no error in the calculations, and the conclusion is sound. Therefore, I concede that the solution presented by the affirmative side is correct, and circle A will indeed make 4 revolutions as it rolls around circle B.
    Aggregator: The debate has concluded, and both debaters have agreed on the correct solution. The number of times circle A will revolve as it rolls around the outside of circle B, given that the radius of circle A is 1/3 the radius of circle B, is 4. There is no relative sliding between the two circles, and the calculations presented by Alice are accurate.

    The debate is finished, and the correct answer is:  4




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 56.352 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
