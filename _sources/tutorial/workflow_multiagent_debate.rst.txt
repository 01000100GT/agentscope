
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: The problem at hand is a classic example of a situation involving the relative motion of two circles, where one circle (circle A) rolls around another (circle B) without slipping. The key to solving this problem lies in understanding the relationship between the circumferences of the two circles and how that influences the number of revolutions circle A makes as it rolls around circle B.

    Given that the radius of circle A is 1/3 the radius of circle B, we can denote the radius of circle A as \( r \) and the radius of circle B as \( 3r \). The circumference of a circle is given by the formula \( C = 2\pi r \), so the circumference of circle A is \( 2\pi r \) and the circumference of circle B is \( 2\pi (3r) = 6\pi r \).

    When circle A rolls around the outside of circle B, it will traverse a path equal to the circumference of the larger circle plus its own diameter (since it's externally tangent and rolling around the outside). This means that the total distance traveled by the center of circle A is the circumference of a circle with radius \( 3r + r = 4r \), which is \( 2\pi (4r) = 8\pi r \).

    To find out how many times circle A revolves, we divide the total distance traveled by the center of circle A by the circumference of circle A:

    \[ \text{Number of Revolutions} = \frac{8\pi r}{2\pi r} = 4 \]

    Therefore, circle A will revolve 4 times as it rolls around circle B once, back to its starting point. It's important to note that this includes both the revolution due to the path around circle B and the additional revolution because circle A itself is rotating as it moves.
    Bob: I must respectfully disagree with the conclusion that circle A will revolve 4 times as it rolls around circle B. The key to this problem is understanding the concept of a "rolling without slipping" condition, which implies that for every point of contact between the two circles, the distance traveled by that point on the smaller circle (circle A) is equal to the distance traveled along the circumference of the larger circle (circle B).

    Given that the radius of circle A is \( r \) and the radius of circle B is \( 3r \), the circumference of circle A is \( 2\pi r \) and the circumference of circle B is \( 6\pi r \). When circle A rolls around circle B, it has to cover the entire circumference of the path traced out by its center, which is the circumference of a circle with a radius of \( 3r + r = 4r \), or \( 8\pi r \).

    However, the number of revolutions of circle A is determined by the ratio of the path length it travels to its own circumference. Since the path length is \( 6\pi r \) (the circumference of circle B), and the circumference of circle A is \( 2\pi r \), the number of revolutions would be:

    \[ \text{Number of Revolutions} = \frac{6\pi r}{2\pi r} = 3 \]

    The additional revolution mentioned in the previous argument does not apply here because when we calculate the number of rotations, we are only considering the relative motion of the two circumferences, not the absolute distance traveled by the center of circle A. Hence, circle A will revolve 3 times, not 4, as it rolls around circle B once back to its starting point.
    Aggregator: The debate has concluded, and it's time to determine the correct answer. Both debaters have provided their reasoning, but there is a subtle point that needs to be clarified.

    Alice correctly pointed out that the total distance traveled by the center of circle A is the circumference of a circle with a radius equal to the sum of the radii of circles A and B, which is \( 4r \). The total distance is therefore \( 8\pi r \).

    However, Bob's argument about the number of revolutions is based on the relative motion between the two circles, which is a valid approach. When circle A rolls around the outside of circle B, for every full rotation of circle A, it will travel a distance along the circumference of circle B that is equal to its own circumference, which is \( 2\pi r \). Since the circumference of circle B is \( 6\pi r \), circle A must make 3 full rotations to cover this distance.

    But we must also account for the fact that as circle A rolls around circle B, it not only rotates due to the contact with circle B (which is 3 rotations) but also because its center is moving in a circular path. This additional rotation is one complete revolution, making the total number of revolutions 4.

    Therefore, Alice's conclusion is correct, and circle A will revolve 4 times as it rolls around circle B once back to its starting point.

    The debate is finished, and the correct answer is:  4




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 54.389 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
