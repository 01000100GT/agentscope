
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: Thank you. To determine how many times circle A will revolve as it rolls around the larger circle B, we can use a geometric approach. Let's denote the radius of circle A as \( r \) and the radius of circle B as \( R \). Given that the radius of circle A is 1/3 the radius of circle B, we have \( R = 3r \).

    When circle A completes one trip around circle B, it travels a distance equal to the circumference of the path it follows. The path is a circle with a radius equal to the sum of the radii of circles A and B, which is \( R + r = 3r + r = 4r \).

    The distance traveled by the center of circle A is therefore the circumference of this path:
    \[      ext{Circumference} = 2\pi (R + r) = 2\pi (4r) = 8\pi r \]

    Since circle A rolls without sliding, the number of revolutions it makes is the total distance traveled divided by its own circumference:
    \[      ext{Number of Revolutions} = \frac{     ext{Distance Traveled}}{        ext{Circumference of Circle A}} = \frac{8\pi r}{2\pi r} = 4 \]

    Therefore, I argue that circle A will revolve 4 times as it rolls around circle B once.
    Bob: I understand that the affirmative side has presented a calculation suggesting that circle A will revolve 4 times as it rolls around circle B. However, I must point out a subtle but crucial aspect of the problem that has been overlooked.

    When circle A rolls around the outside of circle B, not only does it travel the distance equal to the circumference of the path (which is indeed \(8\pi r\)), but it also revolves around its own center. The key insight here is that for every full rotation around circle B, circle A completes an additional revolution due to the fact that it is rotating around the center of circle B.

    Let's break it down:

    - The distance traveled by the center of circle A is \(8\pi r\).
    - The number of revolutions based on this distance is \(\frac{8\pi r}{2\pi r} = 4\).

    However, we must add one more revolution because as circle A goes around circle B, it is also rotating about the point of contact with circle B. This is similar to the concept of a moon orbiting a planet; the moon rotates once on its axis for each orbit around the planet. Therefore, the total number of revolutions is actually 4 (from the distance traveled) plus 1 (from the orbital revolution), giving us a total of 5 revolutions.

    Thus, I argue that circle A will revolve 5 times as it rolls around circle B once.
    Aggregator: Both debaters have provided insightful arguments. Alice correctly calculated the number of times circle A would revolve based on the distance traveled, which is 4 revolutions. Bob added an important point that as circle A rolls around circle B, it also completes an additional revolution due to its rotation about the center of circle B, similar to a moon orbiting a planet.

    Taking into account both the distance-based calculation and the extra revolution due to the orbital motion, the correct total number of revolutions is indeed 5. Therefore, I conclude that Bob's argument is correct, and circle A will revolve 5 times as it rolls around circle B once.

    The debate is finished, and the correct answer is:  5




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 55.617 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
