
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will argue that when circle A, with a radius one-third of circle B, rolls around circle B without sliding, it will complete 4 full revolutions.

    To understand this, let's consider the following:

    1. Let the radius of circle B be \( r \), then the radius of circle A is \( \frac{r}{3} \).
    2. The circumference of circle B is \( 2\pi r \) and the circumference of circle A is \( 2\pi \left(\frac{r}{3}\right) = \frac{2\pi r}{3} \).
    3. When circle A rolls around the outside of circle B, it must travel a distance equal to the circumference of the path it follows, which is the circumference of a circle with a radius of \( r + \frac{r}{3} = \frac{4r}{3} \). This larger circle has a circumference of \( 2\pi \left(\frac{4r}{3}\right) = \frac{8\pi r}{3} \).
    4. To find out how many times circle A revolves, we divide the total distance traveled by the circumference of circle A: \( \frac{\frac{8\pi r}{3}}{\frac{2\pi r}{3}} = 4 \).

    Thus, circle A will revolve 4 times in total as it rolls around circle B once.
    Bob: I understand the calculations made by the affirmative side, but I will present an alternative argument that suggests a different number of revolutions for circle A.

    Let's re-examine the situation:

    1. The radius of circle B is \( r \), and the radius of circle A is \( \frac{r}{3} \).
    2. The circumference of circle B is \( 2\pi r \) and the circumference of circle A is \( \frac{2\pi r}{3} \).
    3. As circle A rolls around the outside of circle B, it follows a path with a radius equal to the sum of both radii, which is \( r + \frac{r}{3} = \frac{4r}{3} \). The path's circumference is \( 2\pi \left(\frac{4r}{3}    ight) = \frac{8\pi r}{3} \).

    Here is where we must be careful: When circle A completes one trip around the larger path, it not only travels the distance of the path but also rotates around its own center. To find the total number of revolutions, we need to consider the rotation due to the curvature of the path as well as the rolling motion.

    The number of revolutions due to the rolling motion is given by the ratio of the path's circumference to the circumference of circle A, which is indeed 4. However, during this motion, circle A also revolves once around its own center because it has completed a full loop around circle B. This additional revolution is often overlooked.

    Therefore, the total number of revolutions is 4 (due to the rolling along the path) plus 1 (the extra turn from going around the larger circle), giving us a total of 5 revolutions.
    Aggregator: The debate has concluded with both sides presenting their arguments. Alice argued that circle A will complete 4 full revolutions, while Bob suggested there would be an additional revolution due to the fact that circle A also revolves around its own center as it rolls around circle B, leading to a total of 5 revolutions.

    Upon reviewing the arguments, the correct answer is that circle A will indeed make 5 full revolutions as it rolls around circle B once. This is because, in addition to the 4 revolutions from rolling along the path, circle A will also complete an extra revolution as it returns to its starting orientation after going around the larger circle. The key point here is that when circle A completes one trip around the circumference of the path, it must also turn an additional 360 degrees to align with its initial position, thus adding one more revolution to the count.

    Therefore, the correct number of revolutions for circle A is 5.

    The debate is finished, and the correct answer is:  5




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 3.941 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
