
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will present the argument that when circle A, with a radius one-third of circle B, rolls around the outside of circle B without sliding, it will complete 4 full revolutions in total by the time it returns to its starting point.

    To understand this, we can start by considering the circumferences of both circles. The circumference of a circle is given by the formula \(C = 2\pi r\), where \(r\) is the radius of the circle. If we denote the radius of circle B as \(R\), then the radius of circle A is \(\frac{1}{3}R\).

    The circumference of circle B is:
    \[ C_B = 2\pi R \]

    The circumference of circle A is:
    \[ C_A = 2\pi \left(\frac{1}{3}R\right) = \frac{2\pi R}{3} \]

    When circle A rolls around circle B, it has to travel a distance equal to the circumference of the path it follows. This path is essentially a circle with a radius equal to the sum of the radii of circles A and B, which is \(R + \frac{1}{3}R = \frac{4}{3}R\). Therefore, the distance circle A must travel is the circumference of this larger circle:
    \[ C_{path} = 2\pi \left(\frac{4}{3}R\right) = \frac{8\pi R}{3} \]

    To find out how many times circle A revolves, we divide the distance traveled by the circumference of circle A:
    \[ \text{Number of Revolutions} = \frac{C_{path}}{C_A} = \frac{\frac{8\pi R}{3}}{\frac{2\pi R}{3}} = \frac{8\pi R}{3} \times \frac{3}{2\pi R} = 4 \]

    Therefore, circle A will revolve 4 times in total as it rolls around circle B and returns to its starting point.
    Bob: I appreciate the detailed argument provided by the affirmative side. However, I must disagree with the conclusion that circle A will complete 4 full revolutions as it rolls around circle B and returns to its starting point.

    The key point of disagreement is in the interpretation of how the rotation of circle A is counted. The calculation of the path length and the number of revolutions based on the circumferences is mathematically correct, but it does not account for the additional revolution that occurs due to the fact that circle A is also rotating about the center of circle B.

    When a smaller circle rolls without sliding around a larger one, it not only rotates because of the distance it travels along the circumference of the larger circle (which is 3 times the circumference of the smaller circle, since the radius of circle A is 1/3 of that of circle B), but it also completes an extra revolution because it has to rotate once more to align with its initial orientation after making a full loop around the larger circle.

    To put it simply, as circle A goes around circle B, it makes 3 revolutions relative to the ground (or to an external observer) because the path length is 3 times its own circumference. But since it's also revolving around the center of circle B, we need to add one more revolution to account for this motion. Therefore, the total number of revolutions is 3 + 1 = 4, minus the one we should not double-count, which leaves us with 3.

    Hence, my position is that circle A will actually complete 3 full revolutions, not 4, when it rolls around circle B and returns to its starting point.
    Bob: It appears there was a miscalculation in my previous statement. When considering the total number of revolutions that circle A undergoes, we must take into account both the revolutions due to the path length and the additional revolution from going around the center of circle B. As the path length corresponds to 3 times the circumference of circle A, this would indeed result in 3 revolutions. However, since circle A is also revolving around the center of circle B, it must make an additional revolution to return to its original orientation. Therefore, the correct total number of revolutions is 3 (from the path) plus 1 (around the center), which equals 4. I apologize for the oversight, and I now agree with the affirmative side that circle A will complete 4 full revolutions.
    Aggregator: The debate has concluded, and both debaters have agreed that the correct number of revolutions for circle A as it rolls around circle B is 4. Alice presented a clear and mathematically sound argument, and Bob acknowledged the oversight in his initial calculation and agreed with Alice's conclusion.

    Therefore, the correct answer to the question is that circle A will revolve 4 times in total when it rolls around circle B and returns to its starting point.

    The debate is finished, and the correct answer is:  4




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 21.191 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
