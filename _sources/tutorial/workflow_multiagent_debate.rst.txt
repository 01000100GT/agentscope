
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will present the argument that when a smaller circle (circle A) with a radius one-third of a larger circle (circle B) rolls around the outside of the larger circle without sliding, it will complete 4 full revolutions.

    To understand this, let's consider the following:

    - The circumference of a circle is given by \( C = 2\pi r \), where \( r \) is the radius.
    - If the radius of circle A is \( \frac{1}{3} \) of the radius of circle B, then the circumference of circle A is also \( \frac{1}{3} \) of the circumference of circle B.
    - When circle A rolls around circle B, it will travel a distance equal to the circumference of the path it follows, which is the circumference of a circle with a radius equal to the sum of the radii of circles A and B. This can be expressed as \( C_{path} = 2\pi (r_A + r_B) \).
    - Since \( r_A = \frac{1}{3}r_B \), the path's circumference is \( C_{path} = 2\pi (\frac{1}{3}r_B + r_B) = 2\pi \frac{4}{3}r_B \).

    The number of times circle A will revolve is the ratio of the path's circumference to the circumference of circle A, which is:

    \[ \text{Revolutions} = \frac{C_{path}}{C_A} = \frac{2\pi \frac{4}{3}r_B}{2\pi \frac{1}{3}r_B} = \frac{\frac{4}{3}r_B}{\frac{1}{3}r_B} = 4 \]

    Therefore, circle A will make 4 complete revolutions as it rolls around the outside of circle B.
    Bob: I understand the argument presented by the affirmative side, but I would like to clarify a common misconception in this problem. The key point that needs to be addressed is the distinction between the number of revolutions and the number of rotations.

    When circle A rolls around circle B, it does indeed travel a distance equal to the circumference of the path, which is \( 2\pi (r_A + r_B) \). However, the number of times circle A will rotate on its own axis while rolling around the outside of circle B is not simply the ratio of the circumferences as calculated. In fact, an additional rotation must be accounted for due to the circular path itself.

    To see why, consider the following:

    - As circle A rolls along the straight line distance equal to the circumference of circle B, it would make 3 full rotations because the circumference of circle A is \( \frac{1}{3} \) of that of circle B.
    - But since circle A is not moving in a straight line but rather along a circular path, it completes an additional rotation. This is similar to how if you were to walk around the Earth's equator, you would still face the same direction after completing the journey, even though you have turned 360 degrees with respect to distant stars.

    Therefore, the total number of rotations is 3 (from the relative motion) plus 1 (from the circular path), giving us 4 rotations. However, the number of revolutions, which is the number of times circle A comes back to the same position with respect to an external fixed point, is actually 3, not 4.

    The correct answer to the question, "How many times will circle A revolve in total?" is 3, when considering the revolutions with respect to an external reference point.
    Aggregator: The debate has concluded with both sides presenting their arguments. Alice argued that the smaller circle A will complete 4 full revolutions around the larger circle B, based on the ratio of the path's circumference to the circumference of circle A. Bob, however, pointed out a distinction between the number of rotations and the number of revolutions. He explained that while the smaller circle does rotate 4 times in total (3 from the relative motion and 1 from the circular path), it only revolves 3 times with respect to an external fixed point.

    Bob's clarification is accurate; when a smaller circle rolls around a larger one without sliding, it completes one less revolution than the number of rotations due to the circular path it follows. The correct answer is that circle A will revolve 3 times as it rolls around circle B. Therefore, Bob's side has provided the correct answer.

    The debate is finished, and the correct answer is:  3




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 1.556 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
