
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will argue that when circle A, with a radius one-third of that of circle B, rolls around the outside of circle B without sliding, it will revolve 4 times in total by the time it returns to its starting point.

    To understand why, let's break down the problem:

    1. Let's denote the radius of circle B as \( R \) and the radius of circle A as \( r \). Given that \( r = \frac{1}{3}R \).

    2. The circumference of a circle is given by \( 2\pi \times \text{radius} \). Therefore, the circumference of circle B is \( 2\pi R \), and the circumference of circle A is \( 2\pi r = 2\pi \left(\frac{1}{3}R\right) = \frac{2\pi R}{3} \).

    3. When circle A rolls around the outside of circle B, it will have to travel a distance equal to the circumference of the path it follows. This path is a circle with a radius equal to the sum of the radii of circles A and B, which is \( R + r = R + \frac{1}{3}R = \frac{4}{3}R \).

    4. The length of this path, or the distance circle A travels, is the circumference of this larger circle, which is \( 2\pi \left(\frac{4}{3}R\right) = \frac{8\pi R}{3} \).

    5. To find out how many times circle A revolves, we divide the total distance traveled by the circumference of circle A:
       \[
       \text{Number of revolutions} = \frac{\frac{8\pi R}{3}}{\frac{2\pi R}{3}} = \frac{8\pi R}{3} \times \frac{3}{2\pi R} = 4
       \]

    Thus, circle A will revolve 4 times in total after it completes one trip around circle B.
    Bob: I understand the argument presented by the affirmative side, but I must disagree with the conclusion that circle A will revolve 4 times. The key point to consider is the relative motion between the two circles. When circle A rolls around the outside of circle B, it does not only travel the distance equal to the circumference of the path (which is \(\frac{8\pi R}{3}\) as calculated), but it also rotates due to its own movement.

    Let's revisit the problem with this in mind:

    1. As previously stated, the radius of circle B is \(R\) and the radius of circle A is \(r = \frac{1}{3}R\).

    2. The circumference of the path that circle A follows is indeed \( \frac{8\pi R}{3} \).

    3. However, when circle A completes one full trip around circle B, it has to rotate once more to align with its starting orientation. This is because the point of contact on circle A changes as it rolls around; for each full rotation around circle B, there is an additional rotation of circle A itself.

    4. To find the total number of revolutions, we take into account both the distance traveled and the additional self-rotation:
       - Distance-based revolutions: \(\frac{\frac{8\pi R}{3}}{\frac{2\pi R}{3}} = 4\)
       - Additional self-rotation: 1

    5. Therefore, the total number of revolutions is \(4 + 1 = 5\).

    In conclusion, while the calculation for the distance-based revolutions is correct, the total number of revolutions of circle A after completing one trip around circle B, including its own rotation, is 5.
    Aggregator: The debate is finished and we can determine the correct answer. Both debaters have provided a thorough analysis, but there is a key concept that needs to be addressed.

    Alice correctly calculated the number of times circle A would revolve based on the distance it travels, which is 4. However, Bob pointed out an important aspect: when circle A completes one trip around circle B, it has to rotate an additional time to align with its starting orientation due to the change in the point of contact as it rolls around. This additional rotation is often overlooked, but it is indeed necessary for the final alignment.

    Therefore, the total number of revolutions is the 4 from the distance traveled plus 1 additional revolution for the final alignment, making the correct answer 5.

    The correct answer to the problem is that circle A will revolve 5 times in total after it completes one trip around circle B.

    The debate is finished, and the correct answer is:  5




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 46.271 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
