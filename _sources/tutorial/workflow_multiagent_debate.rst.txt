
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will present my argument for the given debate topic. The problem involves two circles, A and B, which are externally tangent to each other. Circle A has a radius that is 1/3 the radius of circle B. When circle A rolls around circle B without slipping, we need to determine how many times circle A will revolve in total.

    Let's denote:
    - r as the radius of circle A
    - R as the radius of circle B, where R = 3r

    When circle A rolls around circle B, it will travel a distance equal to the circumference of the path it follows. This path is the circumference of a circle with a radius equal to the sum of the radii of A and B, which is r + R or 4r.

    The circumference of this path is 2π(4r) = 8πr.

    Now, since there is no relative sliding between the two circles, the point of contact on circle A will trace out a distance equal to the circumference of the path (8πr) as it rolls around. The number of revolutions circle A makes is the distance it travels divided by its own circumference, which is 2πr.

    Number of revolutions = (Distance traveled) / (Circumference of A)
    = (8πr) / (2πr)
    = 4

    Therefore, my position is that circle A will revolve 4 times in total when it rolls around circle B one trip back to its starting point.
    Bob: While the affirmative side has provided a clear and logical argument, I believe there is an aspect that needs to be considered, which is the rotation of circle A due to its own motion around circle B. The calculation presented by the affirmative side correctly accounts for the distance traveled by the point of contact on circle A, but it does not account for the additional revolutions that occur as a result of the circular path itself.

    Let's reconsider the problem:

    - Circle A has a radius r.
    - Circle B has a radius R = 3r.
    - When circle A rolls around circle B, it travels a distance equal to the circumference of a circle with a radius of (r + R) = 4r, which is 8πr.

    The number of times circle A revolves around its own center while rolling along the 8πr path is indeed 4, as calculated by the affirmative side. However, we must also consider the fact that as circle A goes around circle B, it will have completed one full orbit around circle B, which adds an extra revolution to the total count.

    Thus, the total number of revolutions is the 4 from the linear travel plus 1 more for the complete orbit around circle B, giving us a total of 5 revolutions.

    Therefore, my position is that circle A will revolve 5 times in total when it rolls around circle B one trip back to its starting point.
    Aggregator: The debate is indeed finished, and we can now determine the correct answer. The key to solving this problem lies in understanding that when circle A rolls around the outside of circle B, it will make one additional revolution due to the fact that it is also orbiting around circle B.

    Let's break down the motion:

    - Circle A will roll a distance equal to the circumference of the path which is 8πr.
    - As it does so, it will revolve 4 times relative to the point of contact with circle B, as calculated by Alice (Distance traveled / Circumference of A = 8πr / 2πr = 4).
    - However, during this process, circle A also completes a full orbit around circle B, which adds an extra revolution.

    Therefore, the total number of revolutions is 4 (from rolling) + 1 (from orbiting) = 5. Thus, the correct answer is that circle A will revolve 5 times in total, supporting Bob's position.

    The debate is finished, and the correct answer is:  5




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 32.898 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
