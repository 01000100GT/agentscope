
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: Thank you. I will argue in favor of the proposition that circle A, with a radius 1/3 that of circle B, will revolve 4 times as it rolls around the circumference of circle B without sliding. To begin, let's consider the relationship between the two circles' circumferences and how that affects the number of revolutions.
    Bob: Thank you. I will argue against the proposition that circle A, with a radius 1/3 that of circle B, will revolve 4 times as it rolls around the circumference of circle B without sliding. The key to this problem is understanding the path that the center of circle A takes as it rolls around circle B. Since the circles are externally tangent and there's no relative sliding, the center of circle A traces out a circular path whose radius is the sum of the radii of both circles. Let's denote the radius of circle B as R, then the radius of circle A would be R/3. The distance the center of circle A travels is therefore 2π(R + R/3) = 2π(4R/3). Since the circumference of circle A is 2π(R/3), the number of revolutions circle A makes is the distance traveled by its center divided by its own circumference. That results in (2π(4R/3)) / (2π(R/3)) which simplifies to 4. However, we must not forget that as circle A returns to its starting point, it has also completed an additional revolution due to the rotation around its own center. Therefore, the total number of revolutions is 4 + 1, which equals 5.
    Aggregator: The debate is not quite finished. Both debaters have correctly calculated the number of revolutions based on the path that the center of circle A travels around circle B, which is 4. However, there is a subtle point about the additional revolution that needs to be addressed. When circle A rolls around circle B and returns to its starting point, it does indeed complete an extra revolution due to the fact that it has to rotate once more to align with its original orientation. This means that in addition to the 4 revolutions counted by the distance traveled, there is one more revolution as circle A turns around its own axis. Therefore, the total number of revolutions is 4 (from the path) + 1 (from the rotation) = 5. We need to confirm if both debaters agree on this final count.
    Alice: I appreciate the detailed explanation from the opposition, but I must clarify that when circle A rolls around circle B, it does not complete an additional revolution due to returning to its starting point. The 4 revolutions already account for the full path that circle A's center traces out.

    To break it down, if we let the radius of circle B be R, then the radius of circle A is R/3. The circumference of circle B is 2πR and the circumference of circle A is 2π(R/3) = (2πR)/3. As circle A rolls around circle B, the distance its center travels is the circumference of the path it follows, which is 2π(R + R/3) = 2π(4R/3).

    The number of times circle A revolves is the total distance traveled by its center divided by the circumference of circle A itself. So, the number of revolutions is:

    \[ \text{Revolutions} = \frac{\text{Distance traveled by the center of A}}{\text{Circumference of A}} = \frac{2\pi(4R/3)}{(2\pi R/3)} = \frac{4R/3}{R/3} = 4 \]

    Therefore, as circle A completes one trip around circle B, it will have revolved exactly 4 times. There is no need to add an extra revolution because the 4 revolutions already include the rotation needed to return to the starting orientation.
    Bob: I appreciate the affirmative side's explanation, but I must insist that the 4 revolutions do not account for the full rotational movement of circle A. The calculation provided correctly identifies the number of times the center of circle A travels a distance equal to its own circumference as it goes around circle B. However, this does not include the fact that circle A also rotates about its own center as it rolls.

    To clarify, when we say circle A revolves 4 times, we are referring to the number of times the point of tangency between the two circles moves around the circumference of circle A. But at the same time, circle A is continuously rotating on its axis. When circle A completes one trip around circle B, it has made 4 revolutions relative to the point of contact, but in order to return to its original orientation, it must make an additional revolution.

    Imagine if you were to roll a small wheel around a larger, fixed wheel. As the small wheel rolls without slipping, it will have to rotate an extra time to end up with the same part of the wheel touching the ground as it started with. This is why the total number of revolutions is 5, not 4.
    Aggregator: The debate is now finished. The correct answer to the problem is that circle A will revolve 5 times as it rolls around circle B without sliding. Here's the reasoning:

    - The center of circle A travels a distance equal to the circumference of the path, which is \(2\pi(R + \frac{R}{3}) = 2\pi(\frac{4R}{3})\).
    - The number of revolutions based on the path traveled by the center of circle A is \(\frac{2\pi(\frac{4R}{3})}{2\pi(\frac{R}{3})} = 4\).
    - However, as circle A returns to its starting point, it must also complete an additional revolution to align with its original orientation.

    Therefore, the total number of revolutions is 4 (from the path) + 1 (from the rotation) = 5. Bob's argument correctly identifies this additional revolution, and thus the correct answer is 5.

    The debate is finished, and the correct answer is:  5




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 27.486 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
