
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will present the argument that when a smaller circle A, with a radius one-third that of a larger circle B, rolls around the outside of circle B without sliding, it will complete 4 full revolutions.

    To understand why, let's break down the problem:

    - Let the radius of circle B be \( r_B \).
    - The radius of circle A is \( r_A = \frac{1}{3}r_B \).

    When circle A rolls around the circumference of circle B, it travels a distance equal to the circumference of the path it follows. This path is a circle with a radius equal to the sum of the radii of circles A and B, which is \( r_B + r_A = r_B + \frac{1}{3}r_B = \frac{4}{3}r_B \).

    The circumference of this path is:
    \[ C_{\text{path}} = 2\pi \left(\frac{4}{3}r_B\right) = \frac{8}{3}\pi r_B \]

    The number of times circle A will revolve is the total distance traveled divided by its own circumference. The circumference of circle A is:
    \[ C_A = 2\pi r_A = 2\pi \left(\frac{1}{3}r_B\right) = \frac{2}{3}\pi r_B \]

    Hence, the number of revolutions \( N \) is:
    \[ N = \frac{C_{\text{path}}}{C_A} = \frac{\frac{8}{3}\pi r_B}{\frac{2}{3}\pi r_B} = \frac{8}{3} \times \frac{3}{2} = 4 \]

    Therefore, circle A will make 4 full revolutions as it rolls around the circumference of circle B.
    Alice: In conclusion, when circle A, which has a radius one-third of circle B, rolls around the outside of circle B without slipping, it completes 4 full revolutions.
    Bob: I disagree with the assertion that circle A completes 4 full revolutions. Let's analyze the situation more carefully. The circumference of a circle is given by the formula C = 2 * pi * r, where r is the radius. If we let the radius of circle B be r, then the radius of circle A is r/3.

    When circle A rolls around the outside of circle B, it will travel a distance equal to the circumference of the path it follows. This path is a circle with a radius equal to the sum of the radii of circles A and B, which is r + r/3 = (4/3)r. Therefore, the length of the path that circle A travels is:

    C_path = 2 * pi * (4/3)r

    The number of times circle A will revolve is the total distance traveled divided by the circumference of circle A itself, which is:

    C_A = 2 * pi * (r/3)

    Hence, the number of revolutions (N) is:

    N = C_path / C_A
      = [2 * pi * (4/3)r] / [2 * pi * (r/3)]
      = (4/3) / (1/3)
      = 4

    However, this calculation only accounts for the revolution due to the movement around the larger circle. We must also consider the spin of circle A around its own center as it rolls. Since there is no relative sliding, each point on the circumference of circle A will touch the path exactly once per revolution around its own center. As circle A has a smaller circumference, it will actually have to rotate an additional time to complete the trip without slipping. Thus, the total number of revolutions is 4 (around the larger circle) plus 1 (its own rotation), which equals 5.

    Therefore, I assert that circle A will revolve 5 times in total.
    Aggregator: Both debaters have provided a clear analysis of the problem. Alice concluded that circle A completes 4 full revolutions, while Bob argued that in addition to the 4 revolutions around the larger circle, there is an additional revolution due to the spin of circle A around its own center, resulting in a total of 5 revolutions.

    To determine the correct number of revolutions, let's break it down:

    - The path length that circle A travels is the circumference of a circle with radius (r + r/3) = (4/3)r, which is C_path = 2 * pi * (4/3)r.
    - The circumference of circle A itself is C_A = 2 * pi * (r/3).

    The number of times circle A will revolve based on the distance traveled is:
    N = C_path / C_A = [2 * pi * (4/3)r] / [2 * pi * (r/3)] = 4

    However, we must also consider the rotation of circle A about its own center. As circle A rolls without slipping, it will indeed make one additional revolution due to its own spinning motion. This is because for every point of contact, circle A has to rotate once completely to maintain the condition of no relative sliding.

    Therefore, the total number of revolutions is 4 (around the larger circle) plus 1 (its own rotation), giving us a total of 5 revolutions. 

    Bob's conclusion is correct, and circle A will revolve 5 times in total.

    The debate is finished, and the correct answer is:  5




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 55.648 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
