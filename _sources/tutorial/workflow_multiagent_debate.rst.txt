
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will present the argument that when circle A, with a radius of 1/3 that of circle B, rolls around the outside of circle B without sliding, it will revolve 4 times in total to return to its starting point.

    To understand this, let's first consider the circumference of each circle. The circumference (C) of a circle is given by the formula C = 2 * π * r, where r is the radius of the circle. Since the radius of circle A (r_A) is 1/3 the radius of circle B (r_B), we can write:

    - Circumference of circle A: C_A = 2 * π * r_A
    - Circumference of circle B: C_B = 2 * π * r_B

    Given that r_A = 1/3 * r_B, we can say C_A = 1/3 * C_B.

    When circle A rolls around circle B, it travels a distance equal to the circumference of the path it follows. This path is not just the circumference of circle B, but also includes the extra distance due to the radius of circle A. Thus, the total path length (P) that circle A travels is the circumference of a larger circle with a radius equal to r_B + r_A. Since r_A = 1/3 * r_B, the radius of this larger circle is:

    - Radius of the path: R_path = r_B + 1/3 * r_B = 4/3 * r_B

    And the path length (P) is:

    - P = 2 * π * R_path = 2 * π * (4/3 * r_B) = 8/3 * π * r_B

    Now, to find out how many times circle A revolves, we need to divide the total path length by the circumference of circle A:

    - Number of revolutions (N) = P / C_A
    - N = (8/3 * π * r_B) / (1/3 * 2 * π * r_B)
    - N = (8/3 * π * r_B) / (2/3 * π * r_B)
    - N = 8/3 / 2/3
    - N = 8/3 * 3/2
    - N = 4

    Therefore, as circle A rolls around circle B, it will make 4 complete revolutions before returning to its starting point.
    Bob: I must respectfully disagree with the affirmative side's conclusion that circle A will revolve 4 times. The mistake in the argument lies in the understanding of how many times circle A will rotate as it rolls around the circumference of the larger path.

    Let's revisit the problem, but this time consider the concept of the relative motion and the number of rotations. When a smaller circle rolls without slipping around the outside of a larger circle, the number of rotations is not simply the ratio of the circumferences of the two circles. We need to account for the additional rotation due to the fact that the center of the smaller circle also revolves around the center of the larger one.

    To find the total number of revolutions, we can use the following approach:

    - The distance traveled by the center of circle A is the circumference of the path taken, which is 2 * π * (r_B + r_A) = 2 * π * (4/3 * r_B).
    - Since r_A = 1/3 * r_B, the circumference of circle A is C_A = 2 * π * (1/3 * r_B).

    The number of rotations of circle A is the distance traveled by its center divided by the circumference of circle A:

    - Number of rotations (N_rotations) = (2 * π * (4/3 * r_B)) / (2 * π * (1/3 * r_B))
    - N_rotations = (4/3 * r_B) / (1/3 * r_B)
    - N_rotations = 4/3 / 1/3
    - N_rotations = 4

    However, this calculation gives us the number of rotations of the center of circle A around the center of circle B, not the number of times circle A itself rotates. To get the number of times circle A rotates, we need to add one more revolution because as the center of circle A completes a full loop around circle B, circle A itself will have rotated once relative to a fixed point in space.

    Therefore, the total number of revolutions of circle A is 4 (from the path) + 1 (the extra rotation due to the loop) = 5.

    In conclusion, when circle A rolls around circle B, it will make 5 complete revolutions before returning to its starting point.
    Aggregator: The debate has concluded and we have heard the arguments from both sides. The correct number of revolutions that circle A will make as it rolls around circle B can be determined by considering the relative motion and the path taken.

    Alice's argument calculates the number of times the center of circle A travels around the center of circle B, which is 4. However, this does not account for the additional rotation that circle A undergoes as its center completes a full loop around circle B.

    Bob correctly pointed out that we need to add one more revolution to the 4 rotations calculated by Alice. This is because when circle A completes a full circuit around circle B, it will have rotated once in addition to the 4 rotations due to the path length. Hence, the total number of revolutions is 5.

    Therefore, the correct answer is that circle A will revolve 5 times in total before returning to its starting point.

    The debate is finished, and the correct answer is:  5




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 21.099 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
