
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will present the argument that when a smaller circle (circle A) rolls around a larger circle (circle B) without sliding and they are externally tangent, the number of revolutions made by the smaller circle is determined by the ratio of their circumferences. Given that the radius of circle A is 1/3 the radius of circle B, the circumference of circle A is also 1/3 the circumference of circle B.

    Let's denote:
    - The radius of circle A as r.
    - The radius of circle B as R = 3r, since it is three times the radius of A.
    - The circumference of circle A as C_A = 2πr.
    - The circumference of circle B as C_B = 2πR = 6πr.

    When circle A rolls around circle B, it has to cover a distance equal to the circumference of circle B, which is 6πr. Since each revolution of circle A covers its own circumference, 2πr, the total number of revolutions (N) can be calculated by dividing the total distance covered by the circumference of circle A:

    N = C_B / C_A
    N = 6πr / 2πr
    N = 3

    So, circle A will revolve exactly 3 times as it rolls around circle B once. However, this calculation does not account for the fact that as circle A revolves around circle B, it also rotates around its own center. This additional rotation is due to the path it follows, which is a circle with a radius equal to the sum of the radii of both circles, or 4r in this case.

    The extra rotation can be thought of as the one we would get if we were to roll the circle on a straight line for the same distance. Since the path length is the circumference of the larger circle (C_B), and the circumference of the combined system (the path followed by the center of circle A) is 8πr, the number of extra rotations is:

    Extra rotations = Path length / Circumference of circle A
    Extra rotations = 6πr / 2πr
    Extra rotations = 3

    But this is the same as the number of revolutions already counted, so no additional full rotations are added. Therefore, the total number of revolutions of circle A is still 3.

    I conclude that circle A will revolve 3 times as it rolls around circle B.
    Bob: I must respectfully disagree with the conclusion presented by the affirmative side. While it is true that the smaller circle (circle A) will have to travel a distance equal to the circumference of the larger circle (circle B), which is 6πr, and that this distance divided by the circumference of circle A (2πr) would suggest 3 revolutions, this calculation only accounts for the linear distance covered.

    The key point that has been overlooked is that as circle A rolls around circle B, it not only travels the distance of the circumference of circle B but also rotates due to its own path, which is a circle with a radius of R + r, or 4r in this case. This means that the center of circle A traces out a circle with a circumference of 8πr.

    When a circle rolls without slipping, each point on the circumference of the rolling circle touches the surface once per revolution. As circle A completes a full trip around circle B, the point of tangency between the two circles will have touched every point on the circumference of circle B exactly once. Since the circumference of circle B is three times that of circle A, we might initially think that circle A makes 3 revolutions. However, because circle A is also rotating around the center of circle B, it must make an additional revolution to complete the path.

    Therefore, the total number of revolutions made by circle A is not just the 3 calculated from the linear distance, but one more to account for the rotation around the center of circle B. In total, circle A will revolve 4 times as it rolls around circle B once.
    Aggregator: The debate has concluded, and we can now determine the correct answer. The key to this problem is understanding that when circle A rolls around circle B, it not only travels a distance equal to the circumference of circle B but also rotates around its own center as it follows the path of a larger circle with radius R + r (which in this case is 4r). This additional rotation is an important factor.

    To find the total number of revolutions, we need to consider both the linear distance traveled and the extra rotation due to the circular path. The linear distance covered by the center of circle A is the circumference of the path it follows, which is 8πr. Since the circumference of circle A itself is 2πr, the number of times circle A will revolve due to the path it follows is:

    Extra rotations = Path length / Circumference of circle A
    Extra rotations = 8πr / 2πr
    Extra rotations = 4

    However, one of these four rotations is already accounted for by the fact that circle A must travel the circumference of circle B, which gives us 3 revolutions. Therefore, the fourth revolution is the additional one due to the circular motion around the center of circle B.

    Hence, the correct answer is that circle A will revolve 4 times as it rolls around circle B once. Bob's argument correctly accounts for the extra rotation, and therefore, he has provided the right answer.

    The debate is finished, and the correct answer is:  4




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 36.355 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
