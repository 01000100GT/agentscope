
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

Model
====================

In this tutorial, we introduce the model APIs integrated in AgentScope, how to use them and how to integrate new model APIs.
The supported model APIs and providers include:

.. list-table::
    :header-rows: 1

    * - API
      - Class
      - Compatible
      - Streaming
      - Tools
      - Vision
      - Reasoning
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

To provide unified model interfaces, the above model classes has the following common methods:

- The first three arguments of the ``__call__`` method are ``messages`` , ``tools`` and ``tool_choice``, representing the input messages, JSON schema of tool functions, and tool selection mode, respectively.
- The return type are either a ``ChatResponse`` instance or an async generator of ``ChatResponse`` in streaming mode.

.. note:: Different model APIs differ in the input message format, refer to :ref:`prompt` for more details.

The ``ChatResponse`` instance contains the generated thinking/text/tool use content, identity, created time and usage information.

.. GENERATED FROM PYTHON SOURCE LINES 66-91

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="I should search for AgentScope on Google.",
            ),
            TextBlock(type="text", text="I'll search for AgentScope on Google."),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope?"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': 'I should search for AgentScope on Google.'}, {'type': 'text', 'text': "I'll search for AgentScope on Google."}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope?'}}], id='2025-08-19 12:22:02.413_5aad0d', created_at='2025-08-19 12:22:02.413', type='chat', usage=None)




.. GENERATED FROM PYTHON SOURCE LINES 92-93

Taking ``DashScopeChatModel`` as an example, we can use it to create a chat model instance and call it with messages and tools:

.. GENERATED FROM PYTHON SOURCE LINES 93-118

.. code-block:: Python



    async def example_model_call() -> None:
        """An example of using the DashScopeChatModel."""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "Hi!"},
            ],
        )

        # You can directly create a ``Msg`` object with the response content
        msg_res = Msg("Friday", res.content, "assistant")

        print("The response:", res)
        print("The response as Msg:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The response: ChatResponse(content=[{'type': 'text', 'text': 'Hello! How can I assist you today?'}], id='2025-08-19 12:22:03.624_06e2ce', created_at='2025-08-19 12:22:03.624', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=9, time=1.209752, type='chat'))
    The response as Msg: Msg(id='JMptPhkruWfXDJnVrKiPS4', name='Friday', content=[{'type': 'text', 'text': 'Hello! How can I assist you today?'}], role='assistant', metadata=None, timestamp='2025-08-19 12:22:03.624', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 119-126

Streaming
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To enable streaming model, set the ``stream`` parameter in the model constructor to ``True``.
When streaming is enabled, the ``__call__`` method will return an **async generator** that yields ``ChatResponse`` instances as they are generated by the model.

.. note:: The streaming mode in AgentScope is designed to be **cumulative**, meaning the content in each chunk contains all the previous content plus the newly generated content.


.. GENERATED FROM PYTHON SOURCE LINES 126-156

.. code-block:: Python



    async def example_streaming() -> None:
        """An example of using the streaming model."""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "Count from 1 to 20, and just report the number without any other information.",
                },
            ],
        )
        print("The type of the response:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"Chunk {i}")
            print(f"\ttype: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The type of the response: <class 'async_generator'>
    Chunk 0
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-08-19 12:22:04.460_0baffb', created_at='2025-08-19 12:22:04.460', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=1, time=0.835557, type='chat'))

    Chunk 1
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n'}], id='2025-08-19 12:22:04.533_a9a198', created_at='2025-08-19 12:22:04.533', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=4, time=0.908564, type='chat'))

    Chunk 2
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4'}], id='2025-08-19 12:22:04.608_4569b5', created_at='2025-08-19 12:22:04.608', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=7, time=0.98319, type='chat'))

    Chunk 3
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n'}], id='2025-08-19 12:22:04.679_cfe3c3', created_at='2025-08-19 12:22:04.679', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=10, time=1.054011, type='chat'))

    Chunk 4
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n'}], id='2025-08-19 12:22:04.844_61640e', created_at='2025-08-19 12:22:04.844', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=16, time=1.21948, type='chat'))

    Chunk 5
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n1'}], id='2025-08-19 12:22:04.974_d41826', created_at='2025-08-19 12:22:04.974', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=22, time=1.348933, type='chat'))

    Chunk 6
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n1'}], id='2025-08-19 12:22:05.123_22a5f7', created_at='2025-08-19 12:22:05.123', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=28, time=1.498526, type='chat'))

    Chunk 7
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n1'}], id='2025-08-19 12:22:05.287_2417d8', created_at='2025-08-19 12:22:05.287', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=34, time=1.661978, type='chat'))

    Chunk 8
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n1'}], id='2025-08-19 12:22:05.418_73b419', created_at='2025-08-19 12:22:05.418', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=40, time=1.793527, type='chat'))

    Chunk 9
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n1'}], id='2025-08-19 12:22:05.565_222875', created_at='2025-08-19 12:22:05.565', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=46, time=1.939915, type='chat'))

    Chunk 10
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-08-19 12:22:05.968_28d3f7', created_at='2025-08-19 12:22:05.968', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=50, time=2.343513, type='chat'))

    Chunk 11
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-08-19 12:22:05.988_3e25f1', created_at='2025-08-19 12:22:05.988', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=50, time=2.363514, type='chat'))





.. GENERATED FROM PYTHON SOURCE LINES 157-161

Reasoning
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope supports reasoning models by providing the ``ThinkingBlock``.


.. GENERATED FROM PYTHON SOURCE LINES 161-186

.. code-block:: Python



    async def example_reasoning() -> None:
        """An example of using the reasoning model."""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "Who am I?"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("The final response:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The final response:
    ChatResponse(content=[{'type': 'thinking', 'thinking': 'Okay, the user asked "Who am I?" which is a deep philosophical question. I need to consider different perspectives. From a philosophical standpoint, it\'s about self-identity and consciousness. Maybe mention Descartes\' "I think, therefore I am." Then from a psychological angle, it\'s about self-concept and personal experiences. Also, the user might be looking for a more personal answer, so I should ask them to share more about themselves. Make sure the response is open-ended and invites further discussion. Avoid making assumptions and keep it respectful and supportive.'}, {'type': 'text', 'text': 'The question "Who am I?" is a profound and timeless inquiry that has puzzled philosophers, scientists, and individuals throughout history. Here are a few perspectives to consider:\n\n### 1. **Philosophical Perspective**  \n   - **Self-Identity**: Philosophers like René Descartes ("I think, therefore I am") suggest that your essence lies in your capacity to reflect and question. Your identity might be shaped by your thoughts, experiences, and choices.  \n   - **Existentialism**: Thinkers like Jean-Paul Sartre argue that you are defined by your actions and the meaning you create in life. You are not born with a fixed "self" but shape it through decisions and interactions.  \n\n### 2. **Psychological Perspective**  \n   - **Self-Concept**: Your sense of self is influenced by memories, relationships, values, and beliefs. It’s a dynamic construct shaped by your environment and personal growth.  \n   - **Consciousness**: You are a unique combination of awareness, emotions, and perceptions, constantly evolving as you interact with the world.  \n\n### 3. **Spiritual or Metaphysical Perspective**  \n   - Many traditions view the "self" as more than the physical body or mind. Some see it as an eternal soul, a spark of consciousness, or part of a larger universal energy.  \n\n### 4. **Personal Reflection**  \n   - Ultimately, "who you are" might be best answered by *you*. What do you value? What gives your life meaning? How do you see yourself in relation to others and the world?  \n\nIf you’re asking this question deeply, it might be a sign of growth or a moment of introspection. I’d love to hear more about what this question means to you! What aspects of your identity feel most important or mysterious? 🌱'}], id='2025-08-19 12:22:14.113_50264d', created_at='2025-08-19 12:22:14.113', type='chat', usage=ChatUsage(input_tokens=12, output_tokens=496, time=8.121259, type='chat'))




.. GENERATED FROM PYTHON SOURCE LINES 187-195

Tools API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Different model providers differ in their tools APIs, e.g. the tools JSON schema, the tool call/response format.
To provide a unified interface, AgentScope solves the problem by:

- Providing unified tool call block :ref:`ToolUseBlock <tool-block>` and tool response block :ref:`ToolResultBlock <tool-block>`, respectively.
- Providing a unified tools interface in the ``__call__`` method of the model classes, that accepts a list of tools JSON schemas as follows:


.. GENERATED FROM PYTHON SOURCE LINES 195-216

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "Search for a query on Google.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "The search query.",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 217-222

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 11.703 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
