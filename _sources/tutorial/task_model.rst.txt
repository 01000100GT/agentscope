
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

Model
====================

In this tutorial, we introduce the model APIs integrated in AgentScope, how to use them and how to integrate new model APIs.
The supported model APIs and providers include:

.. list-table::
    :header-rows: 1

    * - API
      - Class
      - Compatible
      - Streaming
      - Tools
      - Vision
      - Reasoning
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

To provide unified model interfaces, the above model classes has the following common methods:

- The first three arguments of the ``__call__`` method are ``messages`` , ``tools`` and ``tool_choice``, representing the input messages, JSON schema of tool functions, and tool selection mode, respectively.
- The return type are either a ``ChatResponse`` instance or an async generator of ``ChatResponse`` in streaming mode.

.. note:: Different model APIs differ in the input message format, refer to :ref:`prompt` for more details.

The ``ChatResponse`` instance contains the generated thinking/text/tool use content, identity, created time and usage information.

.. GENERATED FROM PYTHON SOURCE LINES 66-91

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="I should search for AgentScope on Google.",
            ),
            TextBlock(type="text", text="I'll search for AgentScope on Google."),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope?"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': 'I should search for AgentScope on Google.'}, {'type': 'text', 'text': "I'll search for AgentScope on Google."}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope?'}}], id='2025-08-19 09:26:57.370_aef81e', created_at='2025-08-19 09:26:57.370', type='chat', usage=None)




.. GENERATED FROM PYTHON SOURCE LINES 92-93

Taking ``DashScopeChatModel`` as an example, we can use it to create a chat model instance and call it with messages and tools:

.. GENERATED FROM PYTHON SOURCE LINES 93-118

.. code-block:: Python



    async def example_model_call() -> None:
        """An example of using the DashScopeChatModel."""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "Hi!"},
            ],
        )

        # You can directly create a ``Msg`` object with the response content
        msg_res = Msg("Friday", res.content, "assistant")

        print("The response:", res)
        print("The response as Msg:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The response: ChatResponse(content=[{'type': 'text', 'text': 'Hello! How can I assist you today?'}], id='2025-08-19 09:27:02.444_1aa473', created_at='2025-08-19 09:27:02.444', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=9, time=5.072906, type='chat'))
    The response as Msg: Msg(id='LyAzWbN7XPJsFq3fKmG5Gf', name='Friday', content=[{'type': 'text', 'text': 'Hello! How can I assist you today?'}], role='assistant', metadata=None, timestamp='2025-08-19 09:27:02.444', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 119-126

Streaming
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To enable streaming model, set the ``stream`` parameter in the model constructor to ``True``.
When streaming is enabled, the ``__call__`` method will return an **async generator** that yields ``ChatResponse`` instances as they are generated by the model.

.. note:: The streaming mode in AgentScope is designed to be **cumulative**, meaning the content in each chunk contains all the previous content plus the newly generated content.


.. GENERATED FROM PYTHON SOURCE LINES 126-156

.. code-block:: Python



    async def example_streaming() -> None:
        """An example of using the streaming model."""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "Count from 1 to 20, and just report the number without any other information.",
                },
            ],
        )
        print("The type of the response:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"Chunk {i}")
            print(f"\ttype: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The type of the response: <class 'async_generator'>
    Chunk 0
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-08-19 09:27:03.443_814ef2', created_at='2025-08-19 09:27:03.443', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=1, time=0.997895, type='chat'))

    Chunk 1
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n'}], id='2025-08-19 09:27:03.539_d90b1b', created_at='2025-08-19 09:27:03.539', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=4, time=1.093814, type='chat'))

    Chunk 2
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4'}], id='2025-08-19 09:27:03.636_a5f7e2', created_at='2025-08-19 09:27:03.636', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=7, time=1.190931, type='chat'))

    Chunk 3
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n'}], id='2025-08-19 09:27:03.735_2f6d8d', created_at='2025-08-19 09:27:03.735', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=10, time=1.289973, type='chat'))

    Chunk 4
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n'}], id='2025-08-19 09:27:03.946_8f34bc', created_at='2025-08-19 09:27:03.946', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=16, time=1.50074, type='chat'))

    Chunk 5
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n1'}], id='2025-08-19 09:27:04.141_adae7e', created_at='2025-08-19 09:27:04.141', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=22, time=1.695272, type='chat'))

    Chunk 6
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n1'}], id='2025-08-19 09:27:04.326_62cd8a', created_at='2025-08-19 09:27:04.326', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=28, time=1.88071, type='chat'))

    Chunk 7
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n1'}], id='2025-08-19 09:27:04.536_d04520', created_at='2025-08-19 09:27:04.537', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=34, time=2.091246, type='chat'))

    Chunk 8
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n1'}], id='2025-08-19 09:27:04.713_d29b1e', created_at='2025-08-19 09:27:04.713', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=40, time=2.267438, type='chat'))

    Chunk 9
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n1'}], id='2025-08-19 09:27:05.075_f1b7ff', created_at='2025-08-19 09:27:05.075', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=46, time=2.62931, type='chat'))

    Chunk 10
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-08-19 09:27:05.299_a5d1f2', created_at='2025-08-19 09:27:05.299', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=50, time=2.853803, type='chat'))

    Chunk 11
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-08-19 09:27:05.317_cf33f6', created_at='2025-08-19 09:27:05.317', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=50, time=2.87178, type='chat'))





.. GENERATED FROM PYTHON SOURCE LINES 157-161

Reasoning
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope supports reasoning models by providing the ``ThinkingBlock``.


.. GENERATED FROM PYTHON SOURCE LINES 161-186

.. code-block:: Python



    async def example_reasoning() -> None:
        """An example of using the reasoning model."""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "Who am I?"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("The final response:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The final response:
    ChatResponse(content=[{'type': 'thinking', 'thinking': 'Okay, the user asked "Who am I?" So, first, I need to figure out what they\'re really asking. They might be looking for a philosophical answer, or maybe they\'re trying to understand their identity in a more personal way. But since I\'m an AI, I should clarify that I can\'t know their personal identity. However, I can offer different perspectives.\n\nI should start by acknowledging that I can\'t know their personal identity. Then, maybe break it down into different angles. Like, from a philosophical standpoint, identity is a complex topic. Existentialists might say it\'s something we create, while others might think it\'s more fixed. Then there\'s the psychological angle, where identity is shaped by experiences and self-perception. Also, cultural and social aspects play a role. Maybe mention that it\'s a mix of all these factors.\n\nI should also consider if the user is feeling lost or seeking self-discovery. Maybe add something about the journey of self-discovery. But keep it open-ended since I can\'t provide personal insights. Make sure to invite them to share more if they want to explore further. Avoid making assumptions and keep the response supportive and informative.\n'}, {'type': 'text', 'text': 'The question "Who am I?" is one of the most profound and enduring inquiries in philosophy, psychology, and spirituality. While I can’t know your personal identity, I can offer some perspectives to help you reflect:\n\n1. **Philosophical View**:  \n   Thinkers like Descartes ("I think, therefore I am") or existentialists (e.g., Sartre) suggest identity is shaped by consciousness, choices, and the search for meaning. You might see yourself as a being in constant becoming, defined by your thoughts, actions, and relationships.\n\n2. **Psychological Perspective**:  \n   Your identity is shaped by experiences, values, beliefs, and how you perceive yourself. It’s fluid, influenced by growth, challenges, and interactions with others. Therapy or self-reflection can help uncover deeper layers of who you are.\n\n3. **Spiritual/Existential Angle**:  \n   Some see identity as more than the physical self—connected to a higher purpose, a sense of unity with the universe, or a quest for transcendence. Others find meaning in relationships, creativity, or service to others.\n\n4. **Cultural & Social Context**:  \n   Identity is also shaped by your environment, heritage, and societal roles. You might feel defined by your community, family, or cultural background, or by breaking free from expectations.\n\n**In short**: You are a unique combination of your experiences, choices, and the stories you tell yourself. The answer to "Who am I?" is not fixed—it’s a journey of discovery. If you’d like, I can help explore this further! 🌱'}], id='2025-08-19 09:27:16.143_82715e', created_at='2025-08-19 09:27:16.143', type='chat', usage=ChatUsage(input_tokens=12, output_tokens=570, time=10.821767, type='chat'))




.. GENERATED FROM PYTHON SOURCE LINES 187-195

Tools API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Different model providers differ in their tools APIs, e.g. the tools JSON schema, the tool call/response format.
To provide a unified interface, AgentScope solves the problem by:

- Providing unified tool call block :ref:`ToolUseBlock <tool-block>` and tool response block :ref:`ToolResultBlock <tool-block>`, respectively.
- Providing a unified tools interface in the ``__call__`` method of the model classes, that accepts a list of tools JSON schemas as follows:


.. GENERATED FROM PYTHON SOURCE LINES 195-216

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "Search for a query on Google.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "The search query.",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 217-222

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 18.778 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
