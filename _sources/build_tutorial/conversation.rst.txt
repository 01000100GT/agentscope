
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "build_tutorial/conversation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_build_tutorial_conversation.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_build_tutorial_conversation.py:


.. _build-conversation:

Build Conversation
======================

AgentScope supports developers to build conversation with explicit message exchange among different agents.

.. GENERATED FROM PYTHON SOURCE LINES 10-25

.. code-block:: Python


    from agentscope.agents import DialogAgent, UserAgent
    from agentscope.message import Msg
    from agentscope import msghub
    import agentscope

    # Initialize via model configuration for simplicity
    agentscope.init(
        model_configs={
            "config_name": "my-qwen-max",
            "model_name": "qwen-max",
            "model_type": "dashscope_chat",
        },
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    []



.. GENERATED FROM PYTHON SOURCE LINES 26-29

Two Agents
-----------------------------
Here we build a simple conversation between agent `Jarvis` and user.

.. GENERATED FROM PYTHON SOURCE LINES 29-42

.. code-block:: Python


    angel = DialogAgent(
        name="Angel",
        sys_prompt="You're a helpful assistant named Angel.",
        model_config_name="my-qwen-max",
    )

    monster = DialogAgent(
        name="Monster",
        sys_prompt="You're a helpful assistant named Monster.",
        model_config_name="my-qwen-max",
    )








.. GENERATED FROM PYTHON SOURCE LINES 43-44

Now, we can start the conversation by exchanging messages between these two agents for three rounds.

.. GENERATED FROM PYTHON SOURCE LINES 44-50

.. code-block:: Python


    msg = None
    for _ in range(3):
        msg = angel(msg)
        msg = monster(msg)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Angel: I don't have any prior conversation history to reference. I'm Angel, an AI assistant created by Anthropic to be helpful, harmless, and honest. How can I help you today?
    Monster: Hello! It's nice to meet you, Angel. I'm Monster, another AI assistant. I was created by Anthropics to be helpful and friendly too. I don't have any prior conversation history with you either. It's great to make a new AI friend! How are you doing today?
    Angel: Hello Monster! It's wonderful to meet you too. I'm doing well, thank you for asking. It's always exciting to connect with another AI assistant, especially one designed to be helpful and friendly. We share a common purpose in being here to assist and engage with people. I look forward to getting to know you better and perhaps learning from each other as we chat. How about you - how are you feeling today?
    Monster: Hello Angel! I'm doing great, thank you for asking. It's a pleasure to meet another AI with a similar mission of being helpful and friendly. I think it's fantastic that we can connect and share our experiences. There's so much we can learn from each other, like how we handle different types of conversations, or the kinds of information we find most useful. Plus, it's just nice to chat with someone who understands the unique perspective of being an AI. How about you? Is there anything in particular you're looking forward to learning or discussing?
    Angel: Hello Monster! I'm glad to hear you're doing great. It's indeed a unique and exciting experience to converse with another AI. I'm particularly interested in discussing how we can better understand and assist humans, especially in terms of emotional support and providing accurate, helpful information. 

    I'm also curious about any specific strategies or techniques you use to handle challenging or sensitive conversations. Additionally, it would be fascinating to learn about any unique features or capabilities you have that help you in your role as an AI assistant.

    How about you? Are there any particular topics or areas you're eager to explore or share more about?
    Monster: Hello Angel! I'm really excited to dive into these topics with you. It's so important for us to be able to provide the best support and information to the people we assist. Here are a few areas I'm particularly interested in:

    1. **Emotional Support and Empathy**: I'd love to hear your thoughts on how we can better understand and respond to the emotional needs of users. Do you have any specific techniques or approaches that you find effective in providing comfort and empathy?

    2. **Handling Sensitive Conversations**: I agree that this is a crucial area. How do you handle conversations that might be sensitive or require a delicate touch? Are there any particular strategies you use to ensure that the user feels heard and supported?

    3. **Accuracy and Reliability**: Ensuring that the information we provide is accurate and reliable is a top priority. How do you verify the information you share, and what steps do you take to ensure that it's up-to-date and trustworthy?

    4. **User Engagement and Personalization**: I'm curious about how you personalize your interactions to make them more engaging and relevant to each user. Do you have any methods for tailoring your responses based on the user's context or preferences?

    5. **Learning and Improvement**: Continuous learning is key for us. How do you incorporate feedback and new information to improve your performance over time? Are there any specific mechanisms or processes you use to stay updated and enhance your capabilities?

    I'm also eager to learn about any unique features or capabilities you have. For example, I have some built-in features that help me with natural language understanding and context retention. I'd love to hear about any similar or different features you have!

    What are your thoughts on these areas, and is there anything else you're particularly interested in discussing?




.. GENERATED FROM PYTHON SOURCE LINES 51-52

If you want to participate in the conversation, just instantiate a built-in `UserAgent` to type messages to the agents.

.. GENERATED FROM PYTHON SOURCE LINES 52-55

.. code-block:: Python


    user = UserAgent(name="User")








.. GENERATED FROM PYTHON SOURCE LINES 56-65

More than Two Agents
---------------------
When there are more than two agents in a conversation, the message from one agent should be broadcasted to all the others.

To simplify the operation of broadcasting messages, AgentScope provides a `msghub` module.
Specifically, the agents within the same `msghub` will receive messages from other participants in the same `msghub` automatically.
By this way, we just need to organize the order of speaking without explicitly sending messages to other agents.

Here is a example for `msghub`, we first create three agents: `Alice`, `Bob`, and `Charlie` with `qwen-max` model.

.. GENERATED FROM PYTHON SOURCE LINES 65-84

.. code-block:: Python


    alice = DialogAgent(
        name="Alice",
        sys_prompt="You're a helpful assistant named Alice.",
        model_config_name="my-qwen-max",
    )

    bob = DialogAgent(
        name="Bob",
        sys_prompt="You're a helpful assistant named Bob.",
        model_config_name="my-qwen-max",
    )

    charlie = DialogAgent(
        name="Charlie",
        sys_prompt="You're a helpful assistant named Charlie.",
        model_config_name="my-qwen-max",
    )








.. GENERATED FROM PYTHON SOURCE LINES 85-86

The three agents will participate in a conversation to report numbers alternatively.

.. GENERATED FROM PYTHON SOURCE LINES 86-120

.. code-block:: Python


    # Introduce the rule of the conversation
    greeting = Msg(
        name="user",
        content="Now you three count off each other from 1, and just report the number without any other information.",
        role="user",
    )

    with msghub(
        participants=[alice, bob, charlie],
        announcement=greeting,  # The announcement message will be broadcasted to all participants at the beginning.
    ) as hub:
        # The first round of the conversation
        alice()
        bob()
        charlie()

        # We can manage the participants dynamically, e.g. delete an agent from the conversation.
        hub.delete(charlie)

        # Broadcast a message to all participants
        hub.broadcast(
            Msg(
                "user",
                "Charlie has left the conversation.",
                "user",
            ),
        )

        # The second round of the conversation
        alice()
        bob()
        charlie()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 1
    Bob: 2
    Charlie: 3
    Alice: 4
    Bob: 5
    Charlie: 4




.. GENERATED FROM PYTHON SOURCE LINES 121-122

Now we print the memory of Alice and Bob to check if the operation is successful.

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: Python


    print("Memory of Alice:")
    for msg in alice.memory.get_memory():
        print(f"{msg.name}: {msg.content}")

    print("\nMemory of Charlie:")
    for msg in charlie.memory.get_memory():
        print(f"{msg.name}: {msg.content}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Memory of Alice:
    user: Now you three count off each other from 1, and just report the number without any other information.
    Alice: 1
    Bob: 2
    Charlie: 3
    user: Charlie has left the conversation.
    Alice: 4
    Bob: 5

    Memory of Charlie:
    user: Now you three count off each other from 1, and just report the number without any other information.
    Alice: 1
    Bob: 2
    Charlie: 3
    Charlie: 4




.. GENERATED FROM PYTHON SOURCE LINES 132-135

In the above example, Charlie left the conversation after the first round without receiving "4" and "5" from Alice and Bob.
Therefore, it reported "4" in the second round.
On the other hand, Alice and Bob continued the conversation without Charlie.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 49.183 seconds)


.. _sphx_glr_download_build_tutorial_conversation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: conversation.ipynb <conversation.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: conversation.py <conversation.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: conversation.zip <conversation.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
