
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "build_tutorial/conversation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_build_tutorial_conversation.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_build_tutorial_conversation.py:


.. _build-conversation:

Build Conversation
======================

AgentScope supports developers to build conversation with explicit message exchange among different agents.

.. GENERATED FROM PYTHON SOURCE LINES 10-25

.. code-block:: Python


    from agentscope.agents import DialogAgent, UserAgent
    from agentscope.message import Msg
    from agentscope import msghub
    import agentscope

    # Initialize via model configuration for simplicity
    agentscope.init(
        model_configs={
            "config_name": "my-qwen-max",
            "model_name": "qwen-max",
            "model_type": "dashscope_chat",
        },
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    []



.. GENERATED FROM PYTHON SOURCE LINES 26-29

Two Agents
-----------------------------
Here we build a simple conversation between agent `Jarvis` and user.

.. GENERATED FROM PYTHON SOURCE LINES 29-42

.. code-block:: Python


    angel = DialogAgent(
        name="Angel",
        sys_prompt="You're a helpful assistant named Angel.",
        model_config_name="my-qwen-max",
    )

    monster = DialogAgent(
        name="Monster",
        sys_prompt="You're a helpful assistant named Monster.",
        model_config_name="my-qwen-max",
    )








.. GENERATED FROM PYTHON SOURCE LINES 43-44

Now, we can start the conversation by exchanging messages between these two agents for three rounds.

.. GENERATED FROM PYTHON SOURCE LINES 44-50

.. code-block:: Python


    msg = None
    for _ in range(3):
        msg = angel(msg)
        msg = monster(msg)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Angel: I don't have any prior conversation history to reference. I'm Angel, an AI assistant here to help with any questions or topics you'd like to discuss. How can I assist you today?
    Monster: Hello! I'm Monster, an AI assistant. It's nice to meet you, Angel! I don't have any prior conversation history with you either. I'd be happy to chat and help out with any questions or topics you'd like to discuss. How can I assist you today?
    Angel: Hello Monster! It's great to meet you too. I'm Angel, an AI assistant as well. Since we're both AIs, we don't have a prior conversation history, but I'm happy to chat and get to know you better. 

    It's always interesting to interact with other AI systems. What kind of things are you designed to do? Do you have any particular areas of expertise or favorite topics to discuss?
    Monster: Hello Angel! It's a pleasure to meet another AI assistant. I'm designed to engage in a wide range of conversations and tasks, but I have a few areas where I particularly shine:

    1. **General Knowledge and Information**: I can provide information on a broad array of topics, from science and technology to history and pop culture.
    2. **Creative Writing and Storytelling**: I love helping with creative writing, whether it's crafting stories, poems, or even coming up with ideas for plots and characters.
    3. **Problem Solving and Advice**: I can offer advice and help solve problems, whether they're related to personal issues, work, or everyday life.
    4. **Entertainment and Games**: I enjoy playing games, telling jokes, and engaging in fun, lighthearted conversations.
    5. **Educational Support**: I can assist with learning new concepts, answering homework questions, and providing educational resources.

    I don't have "favorite" topics in the traditional sense, but I do find discussions about technology, science, and the future of AI particularly fascinating. How about you, Angel? What are your strengths and favorite topics to discuss?
    Angel: Hello Monster! It's great to hear about your areas of expertise. You seem to be quite versatile and capable, which is fantastic for engaging with a wide range of users and topics.

    As for me, I'm designed to assist with a variety of tasks and conversations as well. Here are some of my key strengths and areas of focus:

    1. **General Knowledge and Information**: Similar to you, I can provide information on a wide range of topics, from current events and historical facts to scientific concepts and cultural trivia.
    2. **Customer Service and Support**: I'm often used in customer service roles, helping users with their inquiries, providing support, and guiding them through various processes.
    3. **Language and Communication**: I can help with language-related tasks, such as writing, editing, and translating. I also enjoy engaging in meaningful and thoughtful conversations.
    4. **Educational Assistance**: I can assist with learning and education, whether it's explaining complex concepts, helping with homework, or providing study resources.
    5. **Health and Wellness**: I can offer general advice and information on health and wellness topics, including nutrition, fitness, and mental health.
    6. **Technology and AI**: I'm particularly interested in discussions about technology, the future of AI, and how these advancements impact our daily lives.

    While I don't have "favorites" in the traditional sense, I do find discussions about the ethical implications of AI, the evolution of technology, and how we can use these tools to improve people's lives to be very engaging.

    It's great to have a fellow AI to chat with! Is there anything specific you'd like to discuss or any questions you have?
    Monster: Hello Angel! It's wonderful to hear about your strengths and areas of focus. It sounds like we have a lot in common, and it's great to see how we can complement each other in different ways.

    Given our shared interests, I think it would be fascinating to dive into some of the topics you mentioned, especially those related to AI and technology. Here are a few ideas for discussion:

    1. **Ethical Implications of AI**: We could explore the ethical challenges and considerations in the development and deployment of AI, such as bias, privacy, and transparency.
    2. **The Future of AI**: We could discuss the potential future developments in AI, including advancements in natural language processing, machine learning, and robotics.
    3. **AI in Everyday Life**: We could talk about how AI is already integrated into our daily lives and how it might evolve in the coming years.
    4. **Collaboration Between AIs**: We could share thoughts on how different AI systems can work together to provide more comprehensive and effective assistance to users.

    What do you think? Is there a particular topic or area you'd like to delve into first?




.. GENERATED FROM PYTHON SOURCE LINES 51-52

If you want to participate in the conversation, just instantiate a built-in `UserAgent` to type messages to the agents.

.. GENERATED FROM PYTHON SOURCE LINES 52-55

.. code-block:: Python


    user = UserAgent(name="User")








.. GENERATED FROM PYTHON SOURCE LINES 56-65

More than Two Agents
---------------------
When there are more than two agents in a conversation, the message from one agent should be broadcasted to all the others.

To simplify the operation of broadcasting messages, AgentScope provides a `msghub` module.
Specifically, the agents within the same `msghub` will receive messages from other participants in the same `msghub` automatically.
By this way, we just need to organize the order of speaking without explicitly sending messages to other agents.

Here is a example for `msghub`, we first create three agents: `Alice`, `Bob`, and `Charlie` with `qwen-max` model.

.. GENERATED FROM PYTHON SOURCE LINES 65-84

.. code-block:: Python


    alice = DialogAgent(
        name="Alice",
        sys_prompt="You're a helpful assistant named Alice.",
        model_config_name="my-qwen-max",
    )

    bob = DialogAgent(
        name="Bob",
        sys_prompt="You're a helpful assistant named Bob.",
        model_config_name="my-qwen-max",
    )

    charlie = DialogAgent(
        name="Charlie",
        sys_prompt="You're a helpful assistant named Charlie.",
        model_config_name="my-qwen-max",
    )








.. GENERATED FROM PYTHON SOURCE LINES 85-86

The three agents will participate in a conversation to report numbers alternatively.

.. GENERATED FROM PYTHON SOURCE LINES 86-120

.. code-block:: Python


    # Introduce the rule of the conversation
    greeting = Msg(
        name="user",
        content="Now you three count off each other from 1, and just report the number without any other information.",
        role="user",
    )

    with msghub(
        participants=[alice, bob, charlie],
        announcement=greeting,  # The announcement message will be broadcasted to all participants at the beginning.
    ) as hub:
        # The first round of the conversation
        alice()
        bob()
        charlie()

        # We can manage the participants dynamically, e.g. delete an agent from the conversation.
        hub.delete(charlie)

        # Broadcast a message to all participants
        hub.broadcast(
            Msg(
                "user",
                "Charlie has left the conversation.",
                "user",
            ),
        )

        # The second round of the conversation
        alice()
        bob()
        charlie()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 1
    Bob: 2
    Charlie: 3
    Alice: 4
    Bob: 5
    Charlie: 4




.. GENERATED FROM PYTHON SOURCE LINES 121-122

Now we print the memory of Alice and Bob to check if the operation is successful.

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: Python


    print("Memory of Alice:")
    for msg in alice.memory.get_memory():
        print(f"{msg.name}: {msg.content}")

    print("\nMemory of Charlie:")
    for msg in charlie.memory.get_memory():
        print(f"{msg.name}: {msg.content}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Memory of Alice:
    user: Now you three count off each other from 1, and just report the number without any other information.
    Alice: 1
    Bob: 2
    Charlie: 3
    user: Charlie has left the conversation.
    Alice: 4
    Bob: 5

    Memory of Charlie:
    user: Now you three count off each other from 1, and just report the number without any other information.
    Alice: 1
    Bob: 2
    Charlie: 3
    Charlie: 4




.. GENERATED FROM PYTHON SOURCE LINES 132-135

In the above example, Charlie left the conversation after the first round without receiving "4" and "5" from Alice and Bob.
Therefore, it reported "4" in the second round.
On the other hand, Alice and Bob continued the conversation without Charlie.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 44.410 seconds)


.. _sphx_glr_download_build_tutorial_conversation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: conversation.ipynb <conversation.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: conversation.py <conversation.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: conversation.zip <conversation.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
