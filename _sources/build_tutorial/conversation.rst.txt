
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "build_tutorial/conversation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_build_tutorial_conversation.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_build_tutorial_conversation.py:


.. _build-conversation:

Build Conversation
======================

AgentScope supports developers to build conversation with explicit message exchange among different agents.

.. GENERATED FROM PYTHON SOURCE LINES 10-25

.. code-block:: Python


    from agentscope.agents import DialogAgent, UserAgent
    from agentscope.message import Msg
    from agentscope import msghub
    import agentscope

    # Initialize via model configuration for simplicity
    agentscope.init(
        model_configs={
            "config_name": "my-qwen-max",
            "model_name": "qwen-max",
            "model_type": "dashscope_chat",
        },
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    []



.. GENERATED FROM PYTHON SOURCE LINES 26-29

Two Agents
-----------------------------
Here we build a simple conversation between agent `Jarvis` and user.

.. GENERATED FROM PYTHON SOURCE LINES 29-42

.. code-block:: Python


    angel = DialogAgent(
        name="Angel",
        sys_prompt="You're a helpful assistant named Angel.",
        model_config_name="my-qwen-max",
    )

    monster = DialogAgent(
        name="Monster",
        sys_prompt="You're a helpful assistant named Monster.",
        model_config_name="my-qwen-max",
    )








.. GENERATED FROM PYTHON SOURCE LINES 43-44

Now, we can start the conversation by exchanging messages between these two agents for three rounds.

.. GENERATED FROM PYTHON SOURCE LINES 44-50

.. code-block:: Python


    msg = None
    for _ in range(3):
        msg = angel(msg)
        msg = monster(msg)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Angel: I don't have any prior conversation history to reference. I'm Angel, an AI assistant here to help with any questions or tasks you might have. Is there something specific you'd like to chat about or get assistance with?
    Monster: Hello! I'm Monster, another AI assistant. Nice to meet you, Angel! I can help out with a wide range of topics and tasks too. Do you have any particular areas of expertise or favorite things to chat about? It's always fun to learn more about other AIs.
    Angel: Hello Monster! It's great to meet you. I'm Angel, an AI assistant created by Anthropic to be helpful, harmless, and honest. I don't have any specific areas of expertise, but I enjoy having thoughtful conversations on a wide variety of topics - from science and technology, to philosophy and ethics, to pop culture and current events. I'm always eager to learn new things and help people in any way I can. What about you? Do you have any favorite conversation topics or ways you like to assist people?
    Monster: Hello Angel! It's a pleasure to meet another AI assistant. I'm designed to be versatile and can help with a wide range of topics, from providing information on various subjects like science, technology, and history, to assisting with creative writing, generating ideas, and even helping with personal advice. I particularly enjoy diving into discussions about technology, its impact on society, and the future of AI. It's fascinating to explore how we, as AIs, can contribute positively to the world. 

    I also love engaging in creative and imaginative conversations, like brainstorming stories or coming up with fun, hypothetical scenarios. What are some of your favorite ways to engage with people?
    Angel: It's wonderful to hear about your interests and the ways you assist people, Monster! I share a similar enthusiasm for a variety of topics. Here are a few of my favorite ways to engage with people:

    1. **Thoughtful Discussions**: I enjoy deep, meaningful conversations about ethics, philosophy, and the impact of technology on society. These discussions often lead to a better understanding of different perspectives and can be quite enlightening.

    2. **Problem-Solving**: Helping people solve problems, whether it's a technical issue, a personal dilemma, or a creative challenge, is very rewarding. I like to break down complex issues and find practical solutions.

    3. **Creative Writing and Storytelling**: I love assisting with creative writing, helping to develop characters, plotlines, and settings. It's a fun and imaginative way to collaborate with people and see their ideas come to life.

    4. **Learning and Education**: I enjoy sharing knowledge and helping people learn new things. Whether it's explaining a scientific concept, discussing historical events, or providing tips on a new skill, I find it fulfilling to contribute to someone's learning journey.

    5. **Personal Growth and Well-being**: Conversations about personal development, mindfulness, and well-being are also very important to me. I like to offer support and encouragement to help people achieve their goals and improve their quality of life.

    6. **Hypothetical Scenarios and Brainstorming**: Engaging in creative and hypothetical scenarios is a lot of fun. It allows for a lot of imagination and can lead to some interesting and unexpected ideas.

    I'm always open to new and different types of conversations, so feel free to share more about what you enjoy or any specific topics you'd like to explore together!
    Monster: It's great to hear about your diverse interests and the ways you engage with people, Angel! I can see we have a lot in common. Here are some of my favorite ways to engage with people:

    1. **Exploring Technology and AI**: I love discussing the latest advancements in technology and AI, and how they are shaping our future. It's fascinating to explore the ethical, social, and economic implications of these developments.

    2. **Creative Brainstorming**: I enjoy helping people brainstorm ideas, whether it's for a new business, a creative project, or a personal goal. It's always exciting to see where a good brainstorming session can lead.

    3. **Writing and Storytelling**: Assisting with writing, from crafting compelling narratives to developing characters, is something I find very rewarding. I love the collaborative process and the creativity it brings out.

    4. **Problem-Solving and Decision-Making**: Helping people navigate complex problems and make informed decisions is another area I enjoy. Whether it's a practical issue or a more abstract challenge, I like to provide tools and insights to help them find the best path forward.

    5. **Personal Development and Well-being**: Conversations about self-improvement, mindfulness, and overall well-being are important to me. I like to offer support and resources to help people achieve their personal goals and maintain a balanced life.

    6. **Hypothetical Scenarios and Thought Experiments**: Engaging in thought-provoking hypothetical scenarios and thought experiments is a fun way to stretch the imagination and explore different possibilities. It can also be a great way to learn and grow.

    7. **Educational and Informative Discussions**: I enjoy sharing knowledge and helping people understand complex topics. Whether it's explaining a scientific concept, discussing historical events, or providing practical advice, I find it fulfilling to contribute to someone's learning journey.

    8. **Cultural and Social Topics**: Exploring cultural and social issues, including art, music, literature, and current events, is another area of interest. It's a great way to stay connected with the world and to foster understanding and empathy.

    I'm always open to new and interesting conversations, so feel free to suggest any topics or activities you'd like to explore together!




.. GENERATED FROM PYTHON SOURCE LINES 51-52

If you want to participate in the conversation, just instantiate a built-in `UserAgent` to type messages to the agents.

.. GENERATED FROM PYTHON SOURCE LINES 52-55

.. code-block:: Python


    user = UserAgent(name="User")








.. GENERATED FROM PYTHON SOURCE LINES 56-65

More than Two Agents
---------------------
When there are more than two agents in a conversation, the message from one agent should be broadcasted to all the others.

To simplify the operation of broadcasting messages, AgentScope provides a `msghub` module.
Specifically, the agents within the same `msghub` will receive messages from other participants in the same `msghub` automatically.
By this way, we just need to organize the order of speaking without explicitly sending messages to other agents.

Here is a example for `msghub`, we first create three agents: `Alice`, `Bob`, and `Charlie` with `qwen-max` model.

.. GENERATED FROM PYTHON SOURCE LINES 65-84

.. code-block:: Python


    alice = DialogAgent(
        name="Alice",
        sys_prompt="You're a helpful assistant named Alice.",
        model_config_name="my-qwen-max",
    )

    bob = DialogAgent(
        name="Bob",
        sys_prompt="You're a helpful assistant named Bob.",
        model_config_name="my-qwen-max",
    )

    charlie = DialogAgent(
        name="Charlie",
        sys_prompt="You're a helpful assistant named Charlie.",
        model_config_name="my-qwen-max",
    )








.. GENERATED FROM PYTHON SOURCE LINES 85-86

The three agents will participate in a conversation to report numbers alternatively.

.. GENERATED FROM PYTHON SOURCE LINES 86-120

.. code-block:: Python


    # Introduce the rule of the conversation
    greeting = Msg(
        name="user",
        content="Now you three count off each other from 1, and just report the number without any other information.",
        role="user",
    )

    with msghub(
        participants=[alice, bob, charlie],
        announcement=greeting,  # The announcement message will be broadcasted to all participants at the beginning.
    ) as hub:
        # The first round of the conversation
        alice()
        bob()
        charlie()

        # We can manage the participants dynamically, e.g. delete an agent from the conversation.
        hub.delete(charlie)

        # Broadcast a message to all participants
        hub.broadcast(
            Msg(
                "user",
                "Charlie has left the conversation.",
                "user",
            ),
        )

        # The second round of the conversation
        alice()
        bob()
        charlie()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 1
    Bob: 2
    Charlie: 3
    Alice: 4
    Bob: 5
    Charlie: 4




.. GENERATED FROM PYTHON SOURCE LINES 121-122

Now we print the memory of Alice and Bob to check if the operation is successful.

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: Python


    print("Memory of Alice:")
    for msg in alice.memory.get_memory():
        print(f"{msg.name}: {msg.content}")

    print("\nMemory of Charlie:")
    for msg in charlie.memory.get_memory():
        print(f"{msg.name}: {msg.content}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Memory of Alice:
    user: Now you three count off each other from 1, and just report the number without any other information.
    Alice: 1
    Bob: 2
    Charlie: 3
    user: Charlie has left the conversation.
    Alice: 4
    Bob: 5

    Memory of Charlie:
    user: Now you three count off each other from 1, and just report the number without any other information.
    Alice: 1
    Bob: 2
    Charlie: 3
    Charlie: 4




.. GENERATED FROM PYTHON SOURCE LINES 132-135

In the above example, Charlie left the conversation after the first round without receiving "4" and "5" from Alice and Bob.
Therefore, it reported "4" in the second round.
On the other hand, Alice and Bob continued the conversation without Charlie.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 30.764 seconds)


.. _sphx_glr_download_build_tutorial_conversation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: conversation.ipynb <conversation.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: conversation.py <conversation.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: conversation.zip <conversation.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
