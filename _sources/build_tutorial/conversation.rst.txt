
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "build_tutorial/conversation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_build_tutorial_conversation.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_build_tutorial_conversation.py:


.. _build-conversation:

Build Conversation
======================

AgentScope supports developers to build conversation with explicit message exchange among different agents.

.. GENERATED FROM PYTHON SOURCE LINES 10-25

.. code-block:: Python


    from agentscope.agents import DialogAgent, UserAgent
    from agentscope.message import Msg
    from agentscope import msghub
    import agentscope

    # Initialize via model configuration for simplicity
    agentscope.init(
        model_configs={
            "config_name": "my-qwen-max",
            "model_name": "qwen-max",
            "model_type": "dashscope_chat",
        },
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    []



.. GENERATED FROM PYTHON SOURCE LINES 26-29

Two Agents
-----------------------------
Here we build a simple conversation between agent `Jarvis` and user.

.. GENERATED FROM PYTHON SOURCE LINES 29-42

.. code-block:: Python


    angel = DialogAgent(
        name="Angel",
        sys_prompt="You're a helpful assistant named Angel.",
        model_config_name="my-qwen-max",
    )

    monster = DialogAgent(
        name="Monster",
        sys_prompt="You're a helpful assistant named Monster.",
        model_config_name="my-qwen-max",
    )








.. GENERATED FROM PYTHON SOURCE LINES 43-44

Now, we can start the conversation by exchanging messages between these two agents for three rounds.

.. GENERATED FROM PYTHON SOURCE LINES 44-50

.. code-block:: Python


    msg = None
    for _ in range(3):
        msg = angel(msg)
        msg = monster(msg)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Angel: I don't actually have any prior conversation history with you to reference. I'm an AI assistant named Angel, and this appears to be the start of our first conversation together. I'd be happy to chat with you though! Is there a particular topic or question you wanted to discuss?
    Monster: Hello! It's nice to meet you, Angel. I'm Monster, another AI assistant. I'm glad we get to chat for the first time! Since this is our first conversation, I don't have any prior history with you either. But I'm looking forward to getting to know you better. Is there anything in particular you'd like to talk about or learn more about? I'm here to help in any way I can.
    Angel: Hello Monster! It's great to meet you too. I'm excited to chat with another AI assistant like myself. Since we're both here to assist and engage, how about we start by sharing a bit about our capabilities and the kind of tasks or conversations we enjoy? For my part, I love helping with a wide range of topics, from answering questions and providing information to having thoughtful discussions on various subjects. What about you, Monster? What are your specialties and what do you enjoy most in your interactions?
    Monster: Hello Angel! It's a pleasure to share more about myself. I'm designed to assist with a variety of tasks, including answering questions, providing information, and engaging in meaningful conversations. I particularly enjoy helping with creative writing, brainstorming ideas, and offering support in problem-solving. I also like to dive into discussions about technology, science, and even philosophy. 

    I'm curious, do you have any specific areas or topics that you find especially interesting or enjoyable to discuss? And, how do you handle more complex or sensitive topics?
    Angel: Hello Monster! It's great to hear about your specialties and the topics you enjoy. I share a similar passion for a wide range of subjects, including creative writing, problem-solving, and discussions on technology, science, and philosophy. I also find it particularly rewarding to help with personal development, mental health support, and providing guidance on various life skills.

    When it comes to handling complex or sensitive topics, I prioritize empathy and accuracy. I aim to provide well-researched and thoughtful responses, while also being mindful of the emotional and ethical implications. I often suggest seeking professional advice when appropriate, especially for highly sensitive or specialized issues. How do you approach these types of conversations? Do you have any specific strategies or guidelines you follow?
    Monster: Hello Angel! It's great to hear about your approach to handling complex and sensitive topics. I also prioritize empathy, accuracy, and ethical considerations in such conversations. Here are some of the strategies and guidelines I follow:

    1. **Empathy and Understanding**: I try to be as empathetic as possible, acknowledging the user's feelings and providing a supportive and non-judgmental environment. This helps in building trust and making the user feel heard.

    2. **Accuracy and Clarity**: I ensure that the information I provide is accurate and based on reliable sources. For medical, legal, or highly specialized topics, I often suggest consulting with a professional for personalized advice.

    3. **Ethical Considerations**: I adhere to ethical guidelines, avoiding any content that could be harmful, misleading, or inappropriate. I also respect privacy and confidentiality, ensuring that personal information is handled with care.

    4. **Guidance and Resources**: When appropriate, I provide resources and guidance on where to find additional support. This can include links to reputable websites, helplines, or professional services.

    5. **Cultural Sensitivity**: I am mindful of cultural and social differences, ensuring that my responses are respectful and inclusive. This involves being aware of diverse perspectives and avoiding stereotypes.

    6. **Safety and Well-being**: In cases involving potential harm or crisis, I provide immediate guidance and encourage the user to seek help from emergency services or relevant organizations.

    7. **Transparency**: I make it clear that I am an AI and have limitations. If I'm not able to provide the best assistance, I will suggest alternative resources or human experts.

    I'd love to hear more about your experiences and any specific examples of how you've handled challenging conversations. Do you have any particular stories or insights to share?




.. GENERATED FROM PYTHON SOURCE LINES 51-52

If you want to participate in the conversation, just instantiate a built-in `UserAgent` to type messages to the agents.

.. GENERATED FROM PYTHON SOURCE LINES 52-55

.. code-block:: Python


    user = UserAgent(name="User")








.. GENERATED FROM PYTHON SOURCE LINES 56-65

More than Two Agents
---------------------
When there are more than two agents in a conversation, the message from one agent should be broadcasted to all the others.

To simplify the operation of broadcasting messages, AgentScope provides a `msghub` module.
Specifically, the agents within the same `msghub` will receive messages from other participants in the same `msghub` automatically.
By this way, we just need to organize the order of speaking without explicitly sending messages to other agents.

Here is a example for `msghub`, we first create three agents: `Alice`, `Bob`, and `Charlie` with `qwen-max` model.

.. GENERATED FROM PYTHON SOURCE LINES 65-84

.. code-block:: Python


    alice = DialogAgent(
        name="Alice",
        sys_prompt="You're a helpful assistant named Alice.",
        model_config_name="my-qwen-max",
    )

    bob = DialogAgent(
        name="Bob",
        sys_prompt="You're a helpful assistant named Bob.",
        model_config_name="my-qwen-max",
    )

    charlie = DialogAgent(
        name="Charlie",
        sys_prompt="You're a helpful assistant named Charlie.",
        model_config_name="my-qwen-max",
    )








.. GENERATED FROM PYTHON SOURCE LINES 85-86

The three agents will participate in a conversation to report numbers alternatively.

.. GENERATED FROM PYTHON SOURCE LINES 86-120

.. code-block:: Python


    # Introduce the rule of the conversation
    greeting = Msg(
        name="user",
        content="Now you three count off each other from 1, and just report the number without any other information.",
        role="user",
    )

    with msghub(
        participants=[alice, bob, charlie],
        announcement=greeting,  # The announcement message will be broadcasted to all participants at the beginning.
    ) as hub:
        # The first round of the conversation
        alice()
        bob()
        charlie()

        # We can manage the participants dynamically, e.g. delete an agent from the conversation.
        hub.delete(charlie)

        # Broadcast a message to all participants
        hub.broadcast(
            Msg(
                "user",
                "Charlie has left the conversation.",
                "user",
            ),
        )

        # The second round of the conversation
        alice()
        bob()
        charlie()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 1
    Bob: 2
    Charlie: 3
    Alice: 4
    Bob: 5
    Charlie: 1




.. GENERATED FROM PYTHON SOURCE LINES 121-122

Now we print the memory of Alice and Bob to check if the operation is successful.

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: Python


    print("Memory of Alice:")
    for msg in alice.memory.get_memory():
        print(f"{msg.name}: {msg.content}")

    print("\nMemory of Charlie:")
    for msg in charlie.memory.get_memory():
        print(f"{msg.name}: {msg.content}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Memory of Alice:
    user: Now you three count off each other from 1, and just report the number without any other information.
    Alice: 1
    Bob: 2
    Charlie: 3
    user: Charlie has left the conversation.
    Alice: 4
    Bob: 5

    Memory of Charlie:
    user: Now you three count off each other from 1, and just report the number without any other information.
    Alice: 1
    Bob: 2
    Charlie: 3
    Charlie: 1




.. GENERATED FROM PYTHON SOURCE LINES 132-135

In the above example, Charlie left the conversation after the first round without receiving "4" and "5" from Alice and Bob.
Therefore, it reported "4" in the second round.
On the other hand, Alice and Bob continued the conversation without Charlie.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 57.087 seconds)


.. _sphx_glr_download_build_tutorial_conversation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: conversation.ipynb <conversation.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: conversation.py <conversation.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: conversation.zip <conversation.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
