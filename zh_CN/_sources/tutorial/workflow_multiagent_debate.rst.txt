
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Multi-Agent debate 模拟不同智能体之间的多轮讨论场景，通常包括几个 solver 和一个 aggregator。
典型情况下，solver 生成并交换他们的答案，而 aggregator 收集并总结答案。

我们实现了 `EMNLP 2024`_ 中的示例，其中两个 solver 智能体将按固定顺序讨论一个话题，根据先前的辩论历史表达他们的论点。
在每一轮中，主持人智能体将决定是否可以在当前轮获得最终的正确答案。

.. GENERATED FROM PYTHON SOURCE LINES 14-120

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # 准备一个话题
    topic = "两个圆外切且没有相对滑动。圆A的半径是圆B半径的1/3。圆A绕圆B滚动一圈回到起点。圆A总共会旋转多少次？"


    # 创建两个辩论者智能体，Alice 和 Bob，他们将讨论这个话题。
    def create_solver_agent(name: str) -> ReActAgent:
        """获取一个解决者智能体。"""
        return ReActAgent(
            name=name,
            sys_prompt=f"你是一个名为 {name} 的辩论者。你好，欢迎来到"
            "辩论比赛。我们的目标是找到正确答案，因此你没有必要完全同意对方"
            f"的观点。辩论话题如下所述：{topic}",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # 创建主持人智能体
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""你是一个主持人。将有两个辩论者参与辩论比赛。他们将就以下话题提出观点并进行讨论：
    ``````
    {topic}
    ``````
    在每轮讨论结束时，你将评估辩论是否结束，以及话题正确的答案。""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # 使用多智能体格式化器，因为主持人将接收来自多于用户和助手的消息
        formatter=DashScopeMultiAgentFormatter(),
    )


    # 主持人的结构化输出模型
    class JudgeModel(BaseModel):
        """主持人的结构化输出模型。"""

        finished: bool = Field(description="辩论是否结束。")
        correct_answer: str | None = Field(
            description="辩论话题的正确答案，仅当辩论结束时提供该字段。否则保留为 None。",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """运行多智能体辩论工作流。"""
        while True:
            # MsgHub 中参与者的回复消息将广播给所有参与者。
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "你是正方，请表达你的观点。",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "你是反方。你不同意正方的观点。请表达你的观点和理由。",
                        "user",
                    ),
                )

            # Alice 和 Bob 不需要知道主持人的消息，所以主持人在 MsgHub 外部调用。
            msg_judge = await moderator(
                Msg(
                    "user",
                    "现在你已经听到了他们的辩论，现在判断辩论是否结束，以及你能得到正确答案吗？",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\n辩论结束，正确答案是：",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 正方观点是：当圆A绕着圆B滚动一圈回到起点时，圆A总共会旋转3次。

    首先，我们需要理解两个圆的半径关系。如果圆A的半径是圆B半径的1/3，那么假设圆B的半径为R，则圆A的半径r = R/3。

    当圆A沿着圆B的外边缘无滑动地滚动时，圆A的中心将会沿着一个更大的圆周移动，这个圆的半径等于R + r，即R + R/3 = 4R/3。这意味着圆A的中心所走过的路径长度将是这个大圆的周长，也就是2π * (4R/3) = 8πR/3。

    由于圆A的自身周长是2πr = 2π(R/3) = 2πR/3，我们可以计算出圆A需要转多少圈才能完成这个距离：

    (8πR/3) / (2πR/3) = 4

    所以，从圆A的中心轨迹来看，它需要旋转4次来覆盖这个距离。但是，我们必须注意到，这4次中包括了圆A相对于圆B的公转（即绕圆B一圈），以及它的自转。因为圆A在绕圆B一周的过程中也完成了自己的一圈自转，所以我们需要从总旋转次数中减去一次自转，得到最终的自转次数。

    因此，圆A在绕圆B一周的同时，总共会进行3次自转。
    Bob: 我理解正方的观点，但我的看法是圆A在绕着圆B滚动一圈回到起点时，实际上会旋转4次。这里的关键在于如何理解圆的运动以及它的自转和公转。

    让我们重新审视一下问题。当圆A沿着圆B外切并滚动时，圆A的中心走过的路径长度确实是 \(2\pi \times \frac{4R}{3}\)。但是，当我们说圆A“旋转”时，我们指的是它相对于自己中心的转动，而不是相对于其他参考点（比如地面）的移动。

    圆A的周长是 \(2\pi \times \frac{R}{3}\)，而圆A的中心需要覆盖的路径长度是 \(2\pi \times \frac{4R}{3}\)。因此，圆A要完成这个路径，必须旋转：

    \[
    \frac{2\pi \times \frac{4R}{3}}{2\pi \times \frac{R}{3}} = 4
    \]

    这意味着圆A必须旋转4圈才能让其表面的一点与圆B接触点完全对应起来，即完成一个完整的周期。这4次旋转包括了圆A绕圆B一周的公转，以及在这个过程中发生的额外3次自转。

    如果我们从圆A的角度来看，它确实没有意识到自己是在绕另一个圆滚动；它只是感觉到自己在连续地滚动，并且为了保持与圆B的接触，它必须完成4次完整的旋转。因此，即使圆A在绕圆B公转的同时也在自转，这两者是不能分开考虑的。

    综上所述，我认为圆A在绕圆B滚动一圈的过程中，总共会进行4次旋转。
    Aggregator: 两位辩论者提出了各自的观点，Alice 认为圆A会旋转3次，而Bob认为是4次。从物理学的角度来看，当一个小圆沿着一个大圆的外缘滚动一圈时，它将完成一次公转加上与其自身周长相关的自转次数。在本例中，由于圆A的半径是圆B的1/3，因此圆A的周长也是圆B周长的1/3。

    圆A绕着圆B的中心走过的路径长度等于圆B周长加上两个圆半径之和的周长，即 \(2\pi R + 2\pi \frac{R}{3} = 2\pi \frac{4R}{3}\)。为了覆盖这段距离，圆A需要旋转：

    \[
    \frac{2\pi      imes \frac{4R}{3}}{2\pi         imes \frac{R}{3}} = 4
    \]

    但是，这4次旋转包括了1次公转（绕圆B一周），以及额外的3次自转。因此，如果仅考虑相对于自身的旋转，那么圆A会进行3次自转。所以正确的答案是，圆A在绕圆B滚动一圈回到起点时，总共会进行3次自转。

    辩论结束，正确答案是： 圆A在绕圆B滚动一圈回到起点时，总共会进行3次自转。




.. GENERATED FROM PYTHON SOURCE LINES 121-129

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 43.408 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
