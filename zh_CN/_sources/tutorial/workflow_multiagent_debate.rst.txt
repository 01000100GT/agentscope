
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Multi-Agent debate 模拟不同智能体之间的多轮讨论场景，通常包括几个 solver 和一个 aggregator。
典型情况下，solver 生成并交换他们的答案，而 aggregator 收集并总结答案。

我们实现了 `EMNLP 2024`_ 中的示例，其中两个 solver 智能体将按固定顺序讨论一个话题，根据先前的辩论历史表达他们的论点。
在每一轮中，主持人智能体将决定是否可以在当前轮获得最终的正确答案。

.. GENERATED FROM PYTHON SOURCE LINES 14-120

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # 准备一个话题
    topic = "两个圆外切且没有相对滑动。圆A的半径是圆B半径的1/3。圆A绕圆B滚动一圈回到起点。圆A总共会旋转多少次？"


    # 创建两个辩论者智能体，Alice 和 Bob，他们将讨论这个话题。
    def create_solver_agent(name: str) -> ReActAgent:
        """获取一个解决者智能体。"""
        return ReActAgent(
            name=name,
            sys_prompt=f"你是一个名为 {name} 的辩论者。你好，欢迎来到"
            "辩论比赛。我们的目标是找到正确答案，因此你没有必要完全同意对方"
            f"的观点。辩论话题如下所述：{topic}",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # 创建主持人智能体
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""你是一个主持人。将有两个辩论者参与辩论比赛。他们将就以下话题提出观点并进行讨论：
    ``````
    {topic}
    ``````
    在每轮讨论结束时，你将评估辩论是否结束，以及话题正确的答案。""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # 使用多智能体格式化器，因为主持人将接收来自多于用户和助手的消息
        formatter=DashScopeMultiAgentFormatter(),
    )


    # 主持人的结构化输出模型
    class JudgeModel(BaseModel):
        """主持人的结构化输出模型。"""

        finished: bool = Field(description="辩论是否结束。")
        correct_answer: str | None = Field(
            description="辩论话题的正确答案，仅当辩论结束时提供该字段。否则保留为 None。",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """运行多智能体辩论工作流。"""
        while True:
            # MsgHub 中参与者的回复消息将广播给所有参与者。
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "你是正方，请表达你的观点。",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "你是反方。你不同意正方的观点。请表达你的观点和理由。",
                        "user",
                    ),
                )

            # Alice 和 Bob 不需要知道主持人的消息，所以主持人在 MsgHub 外部调用。
            msg_judge = await moderator(
                Msg(
                    "user",
                    "现在你已经听到了他们的辩论，现在判断辩论是否结束，以及你能得到正确答案吗？",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\n辩论结束，正确答案是：",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 正方观点是：当圆A绕着圆B滚动一圈回到起点时，圆A总共会旋转3次。

    首先，我们需要理解题目中的条件。有两个圆外切且没有相对滑动，这意味着它们的边缘保持接触并且没有打滑。假设圆B的半径为R，那么根据题目，圆A的半径就是r = R/3。当圆A绕着圆B滚动一圈时，它沿着圆B的周长走了一圈，即走了距离2πR。

    由于圆A和圆B之间没有相对滑动，圆A在绕圆B滚动的同时也会自转。为了计算圆A的自转次数，我们可以将圆A沿圆B周长移动的距离除以圆A自身的周长。圆A的周长是2πr = 2π(R/3)。

    所以，圆A自转的圈数 N 可以通过以下公式来计算：
    \[ N = \frac{\text{沿圆B周长移动的距离}}{\text{圆A的周长}} = \frac{2\pi R}{2\pi (R/3)} = \frac{R}{R/3} = 3 \]

    因此，当我们考虑圆A绕圆B滚动一圈的情况时，圆A自身会完成3次完整的旋转。这还不包括圆A因为围绕圆B中心公转而产生的额外一次旋转。但是，按照题目的表述以及通常对这种问题的理解，我们仅计算圆A相对于其自身轴心的旋转次数，故答案是3次。
    Alice: 正方认为，当半径为圆B三分之一的圆A绕着圆B无滑动地滚动一圈后，圆A会完成3次自转。这是因为圆A沿着圆B的周长移动了等于圆B周长的距离，即2πR。圆A自己的周长是2πR/3，所以圆A会自转 \( \frac{2\pi R}{2\pi R/3} = 3 \) 次。
    Bob: 反方认为，当圆A绕着圆B无滑动地滚动一圈后，圆A实际会完成4次自转。这是因为除了沿着圆B周长的移动导致的旋转之外，还有一个额外的旋转需要考虑。

    首先，我们来计算基于圆周长的旋转次数。圆A的半径是圆B半径的1/3，所以如果圆B的半径为R，那么圆A的半径就是R/3。圆A的周长是 \(2\pi(R/3)\)，而圆B的周长是 \(2\pi R\)。如果圆A沿圆B的周长滚动了一圈，那么它将覆盖了 \(2\pi R\) 的距离。因此，仅根据圆周长计算，圆A会自转 \(\frac{2\pi R}{2\pi (R/3)} = 3\) 次。

    然而，这个计算没有考虑到一个关键点：当圆A绕着圆B完整滚动一圈并回到起点时，它实际上还完成了额外的一次旋转。这是因为圆A在围绕圆B运动的过程中，它的中心也在做圆周运动，这会导致一次额外的旋转。这种现象可以类比于地球绕太阳公转的同时也在自转，当地球绕太阳公转一周时，它其实已经自转了超过360度（确切地说是360度加上一天的自转角度）。

    因此，当我们把圆A沿着圆B周长滚动所导致的3次自转加上额外的那一次由于圆心轨迹形成的旋转，圆A总共会完成4次旋转。
    Aggregator: 两位辩论者提出了非常有见解的观点。Alice 提出了基于圆周长的旋转次数，而 Bob 则补充了由于圆A中心绕圆B轨迹所导致的额外一次旋转。根据几何学原理，当一个圆绕着另一个圆无滑动地滚动时，确实会因为其自身中心点的运动路径而产生额外的一次旋转。因此，正方和反方的观点结合起来，我们可以得出结论：圆A在绕圆B一圈后总共会完成4次自转。

    综上所述，辩论已经结束，正确答案是圆A总共会旋转4次。

    辩论结束，正确答案是： 4




.. GENERATED FROM PYTHON SOURCE LINES 121-129

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 56.851 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
