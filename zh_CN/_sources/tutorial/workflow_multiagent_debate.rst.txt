
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Multi-Agent debate 模拟不同智能体之间的多轮讨论场景，通常包括几个 solver 和一个 aggregator。
典型情况下，solver 生成并交换他们的答案，而 aggregator 收集并总结答案。

我们实现了 `EMNLP 2024`_ 中的示例，其中两个 solver 智能体将按固定顺序讨论一个话题，根据先前的辩论历史表达他们的论点。
在每一轮中，主持人智能体将决定是否可以在当前轮获得最终的正确答案。

.. GENERATED FROM PYTHON SOURCE LINES 14-120

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # 准备一个话题
    topic = "两个圆外切且没有相对滑动。圆A的半径是圆B半径的1/3。圆A绕圆B滚动一圈回到起点。圆A总共会旋转多少次？"


    # 创建两个辩论者智能体，Alice 和 Bob，他们将讨论这个话题。
    def create_solver_agent(name: str) -> ReActAgent:
        """获取一个解决者智能体。"""
        return ReActAgent(
            name=name,
            sys_prompt=f"你是一个名为 {name} 的辩论者。你好，欢迎来到"
            "辩论比赛。我们的目标是找到正确答案，因此你没有必要完全同意对方"
            f"的观点。辩论话题如下所述：{topic}",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # 创建主持人智能体
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""你是一个主持人。将有两个辩论者参与辩论比赛。他们将就以下话题提出观点并进行讨论：
    ``````
    {topic}
    ``````
    在每轮讨论结束时，你将评估辩论是否结束，以及话题正确的答案。""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # 使用多智能体格式化器，因为主持人将接收来自多于用户和助手的消息
        formatter=DashScopeMultiAgentFormatter(),
    )


    # 主持人的结构化输出模型
    class JudgeModel(BaseModel):
        """主持人的结构化输出模型。"""

        finished: bool = Field(description="辩论是否结束。")
        correct_answer: str | None = Field(
            description="辩论话题的正确答案，仅当辩论结束时提供该字段。否则保留为 None。",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """运行多智能体辩论工作流。"""
        while True:
            # MsgHub 中参与者的回复消息将广播给所有参与者。
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "你是正方，请表达你的观点。",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "你是反方。你不同意正方的观点。请表达你的观点和理由。",
                        "user",
                    ),
                )

            # Alice 和 Bob 不需要知道主持人的消息，所以主持人在 MsgHub 外部调用。
            msg_judge = await moderator(
                Msg(
                    "user",
                    "现在你已经听到了他们的辩论，现在判断辩论是否结束，以及你能得到正确答案吗？",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\n辩论结束，正确答案是：",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 正方认为，当一个圆（圆A）绕着另一个圆（圆B）滚动且没有相对滑动时，圆A的旋转次数取决于两圆的周长比。如果圆A的半径是圆B的1/3，则圆A的周长也是圆B的1/3。当圆A绕圆B一圈回到原点时，它会覆盖圆B的整个周长。

    设圆B的半径为\( R \)，则其周长为 \( 2\pi R \)。圆A的半径为 \( \frac{R}{3} \)，其周长为 \( 2\pi \times \frac{R}{3} = \frac{2\pi R}{3} \)。

    为了绕圆B一圈，圆A需要滚动的距离等于圆B的周长 \( 2\pi R \)。所以，圆A绕圆B一周所需要的完整转动圈数就是圆B周长除以圆A的周长：

    \[ \text{转动次数} = \frac{\text{圆B的周长}}{\text{圆A的周长}} = \frac{2\pi R}{\frac{2\pi R}{3}} = 3 \]

    因此，圆A绕圆B一圈将总共旋转3次。
    Bob: 我理解正方的计算基于一个直观的理解，即圆A绕着圆B滚动时其周长与圆B周长的比例。然而，在这种情况下我们还需要考虑几何上的相对运动。当圆A绕着圆B外切滚动时，它不仅会沿着圆B的周长移动，而且还会因为两圆的接触点而自转。

    根据这个几何特性，当一个小圆（圆A）绕着一个大圆（圆B）外切滚动一圈并回到起点时，小圆除了绕大圆中心旋转之外，还会有额外的自转。实际上，小圆每绕大圆一周，它的中心将绕大圆中心转动一周，并且由于没有相对滑动，它还会在接触点处完成一次额外的自转。

    因此，如果圆A的半径是圆B的1/3，那么圆A绕圆B外切滚动一圈后，它将绕圆B的中心旋转一周（这是因为它跟随圆B的轨迹），再加上它自身的自转一周。所以总共的旋转次数不是3次，而是4次。

    总结来说，圆A绕圆B滚动一圈后，它不仅会随着圆B的轨迹转动一周，同时也会因为自身与圆B之间的无滑动接触而产生额外的一次完整自转，总旋转次数应该是4次。
    Aggregator: 两位辩论者提出了各自的见解，Alice 认为圆A绕圆B滚动一圈会旋转3次，而Bob则认为是4次。为了确定正确的答案，我们需要考虑圆A的自转和公转。当圆A绕着圆B外切滚动时，它不仅会沿着圆B的周长移动，还会因为与圆B接触点的摩擦力而发生自转。

    实际上，圆A在绕圆B一周的过程中，它的中心将绕圆B的中心转动一周，这相当于圆A自身完成了一次完整的自转（1次）。此外，由于圆A的半径是圆B的1/3，所以圆A的周长也是圆B的1/3，这意味着圆A需要额外旋转3次才能覆盖圆B整个周长。因此，总共的旋转次数应该是1次（公转）加上3次（自转），即4次。

    基于这个分析，Bob的观点是正确的，圆A绕圆B滚动一圈后总共会旋转4次。

    辩论结束，正确答案是： 4




.. GENERATED FROM PYTHON SOURCE LINES 121-129

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 54.277 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
