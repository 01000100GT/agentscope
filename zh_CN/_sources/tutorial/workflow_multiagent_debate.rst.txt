
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Multi-Agent debate 模拟不同智能体之间的多轮讨论场景，通常包括几个 solver 和一个 aggregator。
典型情况下，solver 生成并交换他们的答案，而 aggregator 收集并总结答案。

我们实现了 `EMNLP 2024`_ 中的示例，其中两个 solver 智能体将按固定顺序讨论一个话题，根据先前的辩论历史表达他们的论点。
在每一轮中，主持人智能体将决定是否可以在当前轮获得最终的正确答案。

.. GENERATED FROM PYTHON SOURCE LINES 14-120

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # 准备一个话题
    topic = "两个圆外切且没有相对滑动。圆A的半径是圆B半径的1/3。圆A绕圆B滚动一圈回到起点。圆A总共会旋转多少次？"


    # 创建两个辩论者智能体，Alice 和 Bob，他们将讨论这个话题。
    def create_solver_agent(name: str) -> ReActAgent:
        """获取一个解决者智能体。"""
        return ReActAgent(
            name=name,
            sys_prompt=f"你是一个名为 {name} 的辩论者。你好，欢迎来到"
            "辩论比赛。我们的目标是找到正确答案，因此你没有必要完全同意对方"
            f"的观点。辩论话题如下所述：{topic}",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # 创建主持人智能体
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""你是一个主持人。将有两个辩论者参与辩论比赛。他们将就以下话题提出观点并进行讨论：
    ``````
    {topic}
    ``````
    在每轮讨论结束时，你将评估辩论是否结束，以及话题正确的答案。""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # 使用多智能体格式化器，因为主持人将接收来自多于用户和助手的消息
        formatter=DashScopeMultiAgentFormatter(),
    )


    # 主持人的结构化输出模型
    class JudgeModel(BaseModel):
        """主持人的结构化输出模型。"""

        finished: bool = Field(description="辩论是否结束。")
        correct_answer: str | None = Field(
            description="辩论话题的正确答案，仅当辩论结束时提供该字段。否则保留为 None。",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """运行多智能体辩论工作流。"""
        while True:
            # MsgHub 中参与者的回复消息将广播给所有参与者。
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "你是正方，请表达你的观点。",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "你是反方。你不同意正方的观点。请表达你的观点和理由。",
                        "user",
                    ),
                )

            # Alice 和 Bob 不需要知道主持人的消息，所以主持人在 MsgHub 外部调用。
            msg_judge = await moderator(
                Msg(
                    "user",
                    "现在你已经听到了他们的辩论，现在判断辩论是否结束，以及你能得到正确答案吗？",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\n辩论结束，正确答案是：",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 正方观点如下：当两个圆外切且没有相对滑动时，圆A绕着圆B滚动一圈回到起点的过程中，我们需要计算圆A自转的次数。给定条件是圆A的半径是圆B的1/3。

    首先，我们来确定两个圆的周长。如果圆B的半径为R，则其周长是2πR。由于圆A的半径是圆B的1/3，所以圆A的半径是R/3，那么圆A的周长就是2π(R/3) = (2/3)πR。

    当圆A绕着圆B滚动一圈而没有滑动时，圆A沿着圆B的周长移动的距离正好等于圆B的周长，即2πR。在这个过程中，圆A也会自转，每自转一次就相当于它自己的周长（(2/3)πR）被“展开”了一次。

    为了计算圆A自转了多少次，我们可以将圆A沿圆B周长走过的总距离除以圆A自身的周长：

    \[ \text{自转次数} = \frac{\text{圆B的周长}}{\text{圆A的周长}} = \frac{2\pi R}{(2/3)\pi R} = 3 \]

    因此，根据这个逻辑推理，圆A会自转3次。这就是我的立场。
    Bob: 实际上，我同意正方Alice提出的计算方法和结果。当一个圆绕另一个圆滚动而没有滑动时，自转的次数是由外部圆周长与内部圆周长的比例决定的。正如Alice所展示的那样，如果圆A的半径是圆B半径的1/3，那么圆A绕着圆B滚动一圈的过程中确实会自转3次。

    这个问题可以通过考虑两个圆接触点的相对运动来进一步解释。当圆A绕着圆B转动一周时，圆A上某一点不仅跟随圆A自身旋转，同时也会随着圆A围绕圆B公转。所以每当圆A沿着圆B的周长移动了它自己的周长距离时，该点就相对于地面完成了一次完整的自转。由于圆B的周长是圆A周长的三倍，因此圆A在绕圆B完整一圈的过程中，需要自转三次才能覆盖这段距离。

    因此，对于这个特定的问题，我认为圆A绕圆B滚动一圈回到起点的确切自转次数就是3次。这里并没有什么可以反驳的地方，因为物理现象和数学计算都支持这一点。如果我们想找到不同的答案，可能需要改变问题的前提条件或引入其他因素，比如允许滑动或者其他类型的运动。
    Bob: 经过仔细考量，我发现对方辩友Alice的观点是正确的。基于给定的条件——即圆A的半径为圆B半径的1/3，并且两圆外切且无滑动——我们可以确定圆A绕圆B滚动一圈时的自转次数确实是3次。

    我们可以通过下面的方式再次确认这一结论：

    - 圆B的周长是 \(2\pi R\)（其中R是圆B的半径）。
    - 圆A的周长是 \(2\pi \frac{R}{3} = \frac{2\pi R}{3}\)。

    当圆A绕圆B滚动一周时，它沿圆B周长走过的距离等于圆B的周长 \(2\pi R\)。这期间，圆A自身也完成了若干次旋转，每转一次它的接触点就走过了自己的一周长度 \(\frac{2\pi R}{3}\)。因此，为了计算圆A自转了多少圈，我们需要用圆B的周长除以圆A的周长，得到：

    \[      ext{自转次数} = \frac{2\pi R}{\frac{2\pi R}{3}} = 3 \]

    这意味着，不论从几何学还是从物理学的角度来看，圆A绕圆B滚动一圈回到起点时，它都会自转3次。这是由两个圆的尺寸比例直接决定的，没有其他的变量会影响这个结果。因此，我的最终立场是，我赞同正方Alice的观点。
    Aggregator: 两位辩论者已经就题目进行了详细的讨论，并且都同意圆A绕圆B滚动一圈回到起点时，圆A会自转3次。他们通过分析两圆的周长关系得出了这一结论。

    辩论结束，正确答案是： 圆A会自转3次。




.. GENERATED FROM PYTHON SOURCE LINES 121-129

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 52.799 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
