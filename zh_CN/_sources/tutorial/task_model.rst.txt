
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 66-91

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-08-27 03:42:20.502_63f141', created_at='2025-08-27 03:42:20.502', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 92-93

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 93-118

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], id='2025-08-27 03:42:22.175_8eb009', created_at='2025-08-27 03:42:22.175', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=8, time=1.672425, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='A2w2iZNkqMNGBtyAEH5kNi', name='Friday', content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-08-27 03:42:22.175', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 119-126

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 126-156

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-08-27 03:42:23.835_8976d5', created_at='2025-08-27 03:42:23.835', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.658265, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-08-27 03:42:23.921_02863e', created_at='2025-08-27 03:42:23.921', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.743792, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-08-27 03:42:24.006_71a1fc', created_at='2025-08-27 03:42:24.006', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.828946, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-08-27 03:42:24.091_f43d66', created_at='2025-08-27 03:42:24.091', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.913913, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-08-27 03:42:24.260_36e1e0', created_at='2025-08-27 03:42:24.260', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=2.082951, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-08-27 03:42:24.465_24df2e', created_at='2025-08-27 03:42:24.465', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=2.288403, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-08-27 03:42:25.383_8c8a85', created_at='2025-08-27 03:42:25.383', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=3.206131, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-08-27 03:42:25.592_17fc39', created_at='2025-08-27 03:42:25.592', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=3.414983, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-08-27 03:42:25.767_ebf701', created_at='2025-08-27 03:42:25.767', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=3.589514, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-08-27 03:42:26.001_adf08e', created_at='2025-08-27 03:42:26.001', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=3.823815, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-08-27 03:42:26.192_5e4555', created_at='2025-08-27 03:42:26.192', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=4.015216, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-08-27 03:42:26.314_ed679a', created_at='2025-08-27 03:42:26.314', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=4.136685, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 157-161

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 161-186

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这是一个哲学性的问题，可能需要从多个角度来回答。首先，我需要考虑用户可能的背景和意图。可能用户正在思考自我身份，或者对存在有疑问，也可能是在寻求心理上的支持或哲学上的探讨。\n\n接下来，我应该分析这个问题的不同层面。从心理学角度，自我认知涉及个人的身份认同、价值观、经历等。哲学上，这可能涉及到本体论和认识论的问题，比如“我是谁”可能指向存在的本质或自我意识的来源。宗教或灵性方面，可能有不同的解释，比如灵魂、业力或神的旨意。\n\n然后，我需要考虑用户可能的深层需求。他们可能感到迷茫，或者在寻找生活的意义，或者对自我有困惑。这时候，回答需要既全面又具有启发性，同时避免过于抽象或晦涩。\n\n还要注意用户可能没有明确表达的需求。比如，他们可能希望得到情感支持，或者具体的建议来探索自我。因此，回答中可以包含一些引导性的思考问题，帮助他们自己探索答案。\n\n另外，要确保回答的结构清晰，分点说明不同角度的解释，这样用户可以根据自己的兴趣和需要深入阅读。同时，保持语言的通俗易懂，避免使用过于学术化的术语，除非用户显示出特定的兴趣。\n\n最后，需要提醒用户，这个问题没有标准答案，每个人的答案都是独特的，鼓励他们通过自我反思、与他人交流或专业帮助来探索自己的身份。同时，保持开放和包容的态度，尊重不同的观点和体验。\n'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却可能是人类最深奥的哲学命题之一。它既涉及自我认知，也触及存在的本质。以下从不同角度为你提供一些思考方向：\n\n---\n\n### **1. 从心理学视角：身份的构建**\n- **社会角色**：你可能是“学生”“员工”“朋友”“家人”，这些角色定义了你在社会中的位置。\n- **性格特质**：你可能认为自己是“内向的”“乐观的”“敏感的”，这些特质塑造了你的行为模式。\n- **经历与记忆**：你的过去经历（如童年、重要事件）和记忆共同编织了“你”的故事。\n- **自我意识**：你意识到自己是一个独立的个体，能思考、感受、选择，这种“觉察”本身也是“你”的一部分。\n\n**思考**：如果剥离所有标签（职业、身份、成就），你是否还能找到“我”的核心？\n\n---\n\n### **2. 从哲学视角：存在的追问**\n- **笛卡尔的“我思故我在”**：即使怀疑一切，怀疑本身证明了“我”的存在。\n- **佛教的“无我”**：认为“我”是五蕴（色、受、想、行、识）的暂时组合，没有永恒不变的实体。\n- **存在主义**：萨特认为“存在先于本质”，人通过选择和行动定义自己，而非被预设的身份所束缚。\n\n**思考**：如果“我”是流动的、变化的，那么什么是不变的“我”？\n\n---\n\n### **3. 从灵性/宗教视角：超越物质的自我**\n- **灵魂或意识**：许多传统认为“我”是不朽的灵魂，物质身体只是暂时的载体。\n- **宇宙一体性**：某些灵性体系（如印度教、道教）认为“我”与宇宙本源（如梵、道）是同一的。\n- **修行与觉醒**：通过冥想、内省，可能体验到“我”超越日常身份的更高维度。\n\n**思考**：如果“我”是宇宙的一部分，那么“我是谁”是否意味着“宇宙在思考自己”？\n\n---\n\n### **4. 从科学视角：大脑与意识的谜题**\n- **神经科学**：大脑的神经元活动可能解释了“我”的产生，但意识的本质仍是未解之谜。\n- **量子力学**：某些理论尝试将意识与量子现象关联，但尚未被广泛接受。\n- **人工智能**：如果未来能复制人类意识，是否意味着“我”可以被数字化？\n\n**思考**：如果“我”的本质是大脑的物理过程，那么自由意志是否存在？\n\n---\n\n### **5. 你可能需要的答案**\n- **暂时性答案**：  \n  “我是……一个正在寻找答案的人。”  \n  “我是由我的选择、情感、经历和关系共同塑造的存在。”  \n- **终极性答案**：  \n  这个问题没有标准答案。每个人的“我”都在不断演变，或许答案本身并不重要，重要的是你如何与这个问题共处。\n\n---\n\n### **行动建议**\n- **写日记**：记录你对自己身份的思考，观察哪些想法反复出现。\n- **与他人对话**：倾听他人的视角，可能帮助你看到新的可能性。\n- **尝试冥想或艺术**：通过非语言的方式探索内在的“我”。\n\n---\n\n最终，“我是谁”可能不是一个需要“解决”的问题，而是一个需要持续探索的旅程。你不需要立刻找到答案，重要的是保持好奇和开放。 🌱'}], id='2025-08-27 03:42:39.233_1d7387', created_at='2025-08-27 03:42:39.233', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=1081, time=12.915429, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 187-195

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 195-216

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 217-222

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 18.734 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
