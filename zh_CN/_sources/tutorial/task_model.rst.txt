
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 66-91

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-08-20 03:09:53.177_6ceb1b', created_at='2025-08-20 03:09:53.177', type='chat', usage=None)




.. GENERATED FROM PYTHON SOURCE LINES 92-93

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 93-118

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-08-20 03:09:54.528_d843b4', created_at='2025-08-20 03:09:54.528', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=1.349489, type='chat'))
    作为 Msg 的响应: Msg(id='aoPsYprwpUYKEUSLkMB43N', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-08-20 03:09:54.528', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 119-126

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 126-156

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-08-20 03:09:55.491_5efd58', created_at='2025-08-20 03:09:55.491', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=0.96162, type='chat'))

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 '}], id='2025-08-20 03:09:55.551_b29071', created_at='2025-08-20 03:09:55.551', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=4, time=1.021202, type='chat'))

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4'}], id='2025-08-20 03:09:55.612_b542d4', created_at='2025-08-20 03:09:55.612', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=7, time=1.082238, type='chat'))

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 '}], id='2025-08-20 03:09:56.149_96487e', created_at='2025-08-20 03:09:56.149', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=10, time=1.61958, type='chat'))

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 '}], id='2025-08-20 03:09:56.294_ab2c7c', created_at='2025-08-20 03:09:56.294', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=16, time=1.764522, type='chat'))

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 1'}], id='2025-08-20 03:09:56.411_3f10fe', created_at='2025-08-20 03:09:56.411', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=22, time=1.881905, type='chat'))

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 1'}], id='2025-08-20 03:09:56.539_3aa875', created_at='2025-08-20 03:09:56.539', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=28, time=2.010041, type='chat'))

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 1'}], id='2025-08-20 03:09:56.829_7716b0', created_at='2025-08-20 03:09:56.829', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=34, time=2.299447, type='chat'))

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 1'}], id='2025-08-20 03:09:56.942_af4fb4', created_at='2025-08-20 03:09:56.942', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=40, time=2.412289, type='chat'))

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 1'}], id='2025-08-20 03:09:57.063_ebf262', created_at='2025-08-20 03:09:57.063', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=46, time=2.533698, type='chat'))

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'}], id='2025-08-20 03:09:57.206_dd7e91', created_at='2025-08-20 03:09:57.206', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.676991, type='chat'))

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'}], id='2025-08-20 03:09:57.229_13ea68', created_at='2025-08-20 03:09:57.229', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.699612, type='chat'))





.. GENERATED FROM PYTHON SOURCE LINES 157-161

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 161-186

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这是一个哲学性的问题，可能涉及自我认知、身份认同等方面。我需要先理解用户为什么会问这个问题。可能的情况包括：用户正在经历自我怀疑，或者对自身身份感到困惑，也可能是出于好奇，想探讨哲学层面的意义。\n\n接下来，我应该考虑如何回应。直接回答“你是谁”可能不够，因为这需要更深入的分析。可能需要从多个角度来探讨，比如心理学、哲学、社会学等。例如，从心理学角度，可以讨论自我认知和身份认同的发展；从哲学角度，可以引用笛卡尔的“我思故我在”，或者存在主义的观点；从社会学角度，可以讨论社会角色和人际关系对身份的影响。\n\n同时，要注意用户可能的背景。如果用户是学生，可能需要更学术化的解释；如果是普通用户，可能需要更通俗易懂的语言。另外，要避免过于抽象或晦涩的解释，保持回答的亲和力和实用性。\n\n还需要考虑用户是否有潜在的需求。比如，用户可能在寻找自我认同，或者在面对人生选择时感到迷茫。这时候，除了理论上的解释，可能还需要提供一些实际的建议，比如自我反思的方法，或者如何通过与他人互动来认识自己。\n\n另外，要注意文化差异。不同文化对“自我”的定义可能不同，比如东方文化可能更强调集体身份，而西方文化可能更注重个人主义。但用户使用中文提问，可能更倾向于东方视角，但也不排除其他可能性，所以需要保持中立和包容。\n\n还要检查是否有常见的误解需要澄清。例如，有人可能认为“我是谁”是一个简单的身份问题，但实际上它涉及更深层次的存在意义。需要引导用户思考更广泛的问题，而不仅仅是表面的身份标签。\n\n最后，确保回答结构清晰，逻辑连贯，既有理论支持，又有实际应用，同时保持开放性，鼓励用户进一步思考或提问。\n'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却可能引发深刻的思考。它可能指向对自我身份的探索，也可能涉及对存在意义的追问。以下是一些可能的视角，或许能帮助你更接近答案：\n\n---\n\n### 1. **从哲学角度看**\n   - **笛卡尔的“我思故我在”**：法国哲学家笛卡尔认为，即使怀疑一切，只要“我”在思考，就证明“我”存在。这强调了**意识**作为自我存在的核心。\n   - **存在主义**：萨特认为“存在先于本质”，人通过行动和选择定义自己。你的身份不是预先确定的，而是由你如何生活、如何选择塑造的。\n   - **佛教的“无我”**：佛教认为“我”是五蕴（色、受、想、行、识）的暂时组合，执着于“我”会导致痛苦。这可能引导你思考：是否有一种超越个体的、更深层的“自我”？\n\n---\n\n### 2. **从心理学角度看**\n   - **自我认知**：心理学家埃里克森提出“身份认同危机”，认为人在不同阶段会不断追问“我是谁”。你的身份可能由成长经历、价值观、兴趣、人际关系等共同构成。\n   - **社会角色**：你在家庭、职业、社会中的角色（如“女儿”“学生”“朋友”）可能影响你对自己的认知，但这些角色只是“我”的一部分。\n   - **内在与外在的冲突**：有时我们会感到“我”与“他人期待的我”之间存在矛盾，这种冲突可能促使你更深入地探索真实的自己。\n\n---\n\n### 3. **从日常体验看**\n   - **你如何定义自己？**  \n     是通过职业（“我是程序员”）、兴趣（“我是音乐爱好者”）、情感（“我是某人的朋友”），还是更抽象的特质（“我是善良的”“我是好奇的”）？\n   - **你渴望成为什么样的人？**  \n     这可能揭示你内心未被满足的渴望，或对理想自我的追求。\n   - **你如何与他人互动？**  \n     他人的反馈可能成为一面镜子，帮助你看到自己未察觉的特质。\n\n---\n\n### 4. **从更广阔的视角看**\n   - **宇宙中的“我”**：如果从宇宙尺度看，你的存在是无数偶然的产物（如父母相遇、基因组合、历史环境等）。这种视角可能让人感到渺小，也可能激发对生命意义的敬畏。\n   - **集体与个体的交织**：你的身份也与文化、历史、社会结构相关。例如，你是某个民族、时代的产物，同时也在塑造未来。\n\n---\n\n### 5. **可能没有“标准答案”**\n   “我是谁”可能是一个**动态的过程**，而非静态的答案。随着经历、学习和反思，你会不断重新定义自己。也许答案并不重要，重要的是你愿意持续追问和探索。\n\n---\n\n### 如果你想更具体地思考：\n- 写下你最珍视的三个特质，它们如何影响你的选择？\n- 回忆一个让你感到“真实”的时刻，那时的你是什么样的？\n- 如果没有社会标签（如职业、年龄、性别），你会如何描述自己？\n\n---\n\n最终，这个问题的答案可能藏在你的感受、选择和行动中。或许不需要急于找到答案，而是允许自己在探索中逐渐靠近那个更真实的“我”。你愿意和我分享更多关于你的想法吗？'}], id='2025-08-20 03:10:15.367_2c6413', created_at='2025-08-20 03:10:15.368', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=1138, time=18.135469, type='chat'))




.. GENERATED FROM PYTHON SOURCE LINES 187-195

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 195-216

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 217-222

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 22.194 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
