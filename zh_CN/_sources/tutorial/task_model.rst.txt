
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 66-91

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-09-02 02:56:47.017_36f140', created_at='2025-09-02 02:56:47.017', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 92-93

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 93-118

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-09-02 02:56:48.597_fb817d', created_at='2025-09-02 02:56:48.597', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=1.578281, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='4v5HKKiDxPw5wvR3spkigV', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-09-02 02:56:48.597', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 119-126

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 126-156

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-02 02:56:49.650_1c560d', created_at='2025-09-02 02:56:49.650', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.051949, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-09-02 02:56:49.712_c4d7a9', created_at='2025-09-02 02:56:49.712', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.113465, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2'}], id='2025-09-02 02:56:49.780_270c7f', created_at='2025-09-02 02:56:49.780', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=3, time=1.181413, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n'}], id='2025-09-02 02:56:49.847_e21cca', created_at='2025-09-02 02:56:49.847', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=4, time=1.248499, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-09-02 02:56:50.114_e696fe', created_at='2025-09-02 02:56:50.114', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.51548, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n'}], id='2025-09-02 02:56:52.883_bcaef0', created_at='2025-09-02 02:56:52.883', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=12, time=4.284848, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n'}], id='2025-09-02 02:56:53.149_535e6f', created_at='2025-09-02 02:56:53.149', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=16, time=4.551337, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-09-02 02:56:53.451_efd3d5', created_at='2025-09-02 02:56:53.451', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=4.852802, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n'}], id='2025-09-02 02:56:53.743_bca1c8', created_at='2025-09-02 02:56:53.743', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=24, time=5.145161, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n1'}], id='2025-09-02 02:56:54.003_301cb8', created_at='2025-09-02 02:56:54.003', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=28, time=5.404962, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-09-02 02:56:54.310_b11de0', created_at='2025-09-02 02:56:54.310', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=5.71211, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n'}], id='2025-09-02 02:56:54.663_329099', created_at='2025-09-02 02:56:54.663', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=36, time=6.064576, type='chat'), metadata=None)

    块 12
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n1'}], id='2025-09-02 02:56:54.896_95b2f5', created_at='2025-09-02 02:56:54.896', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=40, time=6.298208, type='chat'), metadata=None)

    块 13
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-09-02 02:56:55.162_6e1900', created_at='2025-09-02 02:56:55.162', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=6.563754, type='chat'), metadata=None)

    块 14
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n'}], id='2025-09-02 02:56:55.411_91338e', created_at='2025-09-02 02:56:55.411', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=48, time=6.813177, type='chat'), metadata=None)

    块 15
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-02 02:56:55.597_79c289', created_at='2025-09-02 02:56:55.597', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=6.998592, type='chat'), metadata=None)

    块 16
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-02 02:56:55.613_df4d41', created_at='2025-09-02 02:56:55.613', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=7.015231, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 157-161

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 161-186

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这个问题看起来简单，但其实很深奥。首先，我需要理解用户为什么会问这个问题。可能的情况有很多：他们可能在自我探索，或者感到迷茫，或者只是好奇。也有可能他们正在经历某种身份危机，或者对自我认知有疑问。\n\n接下来，我得考虑如何回答。直接回答“你是你”可能太表面了，用户可能需要更深层次的探讨。根据哲学角度，比如笛卡尔的“我思故我在”，或者佛教中的无我观念，不同的哲学体系有不同的解释。心理学上，可能涉及自我认同、人格发展等概念。\n\n还要考虑用户可能的背景。如果是年轻人，可能更多是关于自我认同的问题；如果是成年人，可能涉及人生目标或存在意义。另外，用户可能没有明确表达他们的具体困惑，需要进一步引导他们思考。\n\n另外，用户可能希望得到情感支持，而不仅仅是理论回答。这时候需要平衡理性和情感，既提供信息，又给予关怀。同时，避免给出过于抽象或难以理解的回答，保持语言通俗易懂。\n\n还要注意文化差异。不同文化对“自我”的定义不同，比如西方强调个人主义，东方可能更注重社会角色。不过用户使用中文提问，可能更倾向于东方视角，但也不排除其他可能性。\n\n最后，确保回答开放性，鼓励用户进一步思考或提问。避免绝对化的结论，因为“我是谁”这个问题没有标准答案，每个人的答案都可能不同。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却蕴含着深刻的哲学与生命意义。不同的人、不同的阶段可能会有不同的答案。以下是一些可能的思考方向，或许能帮你探索这个问题：\n\n---\n\n### 1. **从存在主义的角度**  \n哲学家萨特说：“存在先于本质。”  \n**你是一个独特的存在**，你的选择、行动和经历塑造了你是谁。  \n- **你不是被定义的**：没有预设的“本质”，你通过自由选择和行动成为自己。  \n- **你拥有改变的能力**：即使现在感到迷茫，你依然可以重新定义自己的方向。\n\n---\n\n### 2. **从心理学的角度**  \n人的自我认同是动态发展的：  \n- **身份的多重性**：你是学生、朋友、家人、工作者，甚至可能是某个群体中的一员。  \n- **内在与外在的交织**：你可能在他人眼中是“成功人士”，但内心却感到孤独；或相反。  \n- **成长与变化**：随着时间推移，你的价值观、兴趣、目标可能不断调整，这正是“我是谁”的流动性。\n\n---\n\n### 3. **从哲学与宗教的角度**  \n- **佛教的“无我”**：认为“我”是暂时的、因缘和合的产物，而非固定不变的实体。  \n- **道家的“自然”**：顺应本心，不被外在标签束缚，回归“道”的状态。  \n- **基督教的“被爱”**：你被赋予独特价值，是神的创造，但需要通过信仰与行动去实现。\n\n---\n\n### 4. **从日常生活的角度**  \n- **你是一个不断提问的人**：提出“我是谁”本身就是一种觉醒，说明你正在思考生命的本质。  \n- **你的答案可能藏在细节里**：  \n  - 你关心什么？  \n  - 你害怕什么？  \n  - 你愿意为谁付出？  \n  - 你每天的行动是否与内心一致？  \n\n---\n\n### 5. **如果此刻你感到困惑**  \n- **允许自己迷茫**：没有人能立刻回答“我是谁”，这是人生的一部分。  \n- **通过行动寻找答案**：尝试新事物、与他人对话、记录感受，可能会逐渐清晰。  \n- **接受不确定性**：也许“我是谁”没有标准答案，而是一个持续探索的过程。\n\n---\n\n最终，**“我是谁”可能没有终点，但每一次追问本身，都在让你更接近真实的自己**。如果你愿意，可以分享更多你的想法，我们一起探索。 🌱'}], id='2025-09-02 02:57:06.304_f04618', created_at='2025-09-02 02:57:06.304', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=848, time=10.685623, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 187-195

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 195-216

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 217-222

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 19.291 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
