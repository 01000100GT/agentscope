
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 66-91

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-08-19 09:25:00.215_e9ef47', created_at='2025-08-19 09:25:00.215', type='chat', usage=None)




.. GENERATED FROM PYTHON SOURCE LINES 92-93

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 93-118

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么我可以帮助你的吗？'}], id='2025-08-19 09:25:01.480_fc08ee', created_at='2025-08-19 09:25:01.480', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=8, time=1.264212, type='chat'))
    作为 Msg 的响应: Msg(id='cLpzEc2dG9wxZMK5b97UMR', name='Friday', content=[{'type': 'text', 'text': '你好！有什么我可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-08-19 09:25:01.480', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 119-126

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 126-156

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-08-19 09:25:02.441_100479', created_at='2025-08-19 09:25:02.441', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=0.959775, type='chat'))

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-08-19 09:25:02.513_83e301', created_at='2025-08-19 09:25:02.513', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.031345, type='chat'))

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-08-19 09:25:02.589_1fd168', created_at='2025-08-19 09:25:02.589', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.107752, type='chat'))

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-08-19 09:25:02.659_a8bed9', created_at='2025-08-19 09:25:02.659', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.177544, type='chat'))

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-08-19 09:25:02.804_b5d5b2', created_at='2025-08-19 09:25:02.804', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.322503, type='chat'))

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-08-19 09:25:02.963_e61619', created_at='2025-08-19 09:25:02.963', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=1.481681, type='chat'))

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-08-19 09:25:03.100_013893', created_at='2025-08-19 09:25:03.100', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=1.618641, type='chat'))

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-08-19 09:25:03.340_5a82db', created_at='2025-08-19 09:25:03.340', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=1.8589, type='chat'))

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-08-19 09:25:03.499_80c0f2', created_at='2025-08-19 09:25:03.499', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=2.017944, type='chat'))

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-08-19 09:25:03.630_24042c', created_at='2025-08-19 09:25:03.630', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=2.148964, type='chat'))

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-08-19 09:25:03.778_559ae8', created_at='2025-08-19 09:25:03.778', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.297181, type='chat'))

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-08-19 09:25:03.867_47658a', created_at='2025-08-19 09:25:03.867', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.385696, type='chat'))





.. GENERATED FROM PYTHON SOURCE LINES 157-161

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 161-186

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这是一个哲学性的问题，涉及到自我认知和身份认同。首先，我需要理解用户为什么会问这个问题。可能的情况包括：\n\n1. **哲学思考**：用户可能在探索自我存在的意义，或者对身份、意识的本质感到好奇。\n2. **心理状态**：用户可能正在经历自我怀疑、身份危机，或者对自身存在感到困惑。\n3. **文学或艺术启发**：用户可能受到某些作品的影响，比如电影、书籍中的角色或主题。\n4. **技术相关**：用户可能在测试AI对自我认知的理解，或者对AI本身的身份产生疑问。\n\n接下来，我需要考虑如何回应这个问题。由于这是一个开放性问题，答案可能因人而异。需要提供不同的角度，同时保持中立和尊重。\n\n可能的回应方向：\n\n- **哲学角度**：引用不同哲学家的观点，如笛卡尔的“我思故我在”，或者存在主义对自我定义的看法。\n- **心理学角度**：讨论自我认同的发展，如埃里克森的理论，或者现代心理学对身份形成的理解。\n- **文化角度**：不同文化对“自我”的定义可能不同，比如东方文化更强调集体身份，而西方更强调个体独立。\n- **科学角度**：从神经科学或认知科学的角度探讨意识和自我是如何形成的。\n- **宗教或精神层面**：不同宗教对“我是谁”的解释，如佛教的“无我”概念，或者基督教中的灵魂观念。\n\n同时，需要避免给出过于绝对的答案，因为这个问题没有标准答案。应该鼓励用户进行自我反思，并提供不同的视角供参考。\n\n还要注意用户可能的深层需求。如果用户处于情绪低落或困惑中，可能需要更多的同理心和支持，而不仅仅是理论性的回答。因此，回应中应包含对用户情感状态的关心，同时提供信息性的内容。\n\n最后，确保语言简洁易懂，避免使用过于学术化的术语，让用户能够轻松理解和接受信息。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却触及人类存在的核心。它可能引发哲学思考、心理探索，甚至对自我身份的深刻质疑。以下是一些可能的视角，或许能帮助你找到属于自己的答案：\n\n---\n\n### 1. **哲学视角：存在的追问**\n   - **笛卡尔**：“我思故我在。”（*Cogito, ergo sum*）  \n     他认为，即使怀疑一切，思考本身证明了“我”的存在。\n   - **存在主义**（如萨特）：  \n     “人是被抛入世界的”，你的身份并非预设，而是通过选择和行动不断塑造的。\n   - **佛教**：  \n     “无我”——认为“我”是五蕴（色、受、想、行、识）的暂时组合，执着于“我”会带来痛苦。\n\n---\n\n### 2. **心理学视角：身份的构建**\n   - **埃里克森**的“心理社会发展阶段”：  \n     人在不同阶段会面临“身份 vs 角色混乱”的冲突，例如青少年时期通过探索价值观、职业、人际关系来定义自己。\n   - **社会角色**：  \n     你可能是“学生”“朋友”“子女”“工作者”……这些角色共同构成了你对“我”的感知。\n   - **内在与外在**：  \n     有时我们会混淆“别人眼中的我”和“真实的我”，需要通过反思区分。\n\n---\n\n### 3. **科学视角：意识与大脑**\n   - **神经科学**：  \n     大脑的神经元活动、记忆、情感和经验共同构建了“自我感”。但科学尚未完全解释意识的本质。\n   - **量子物理**：  \n     一些理论提出，观察者（即“我”）可能影响现实，但这更多是哲学推测而非实证。\n\n---\n\n### 4. **文化与社会视角**\n   - **集体主义 vs 个人主义**：  \n     在某些文化中，“我是谁”可能更多与家庭、群体联系（如东亚文化），而在西方可能更强调个人独特性。\n   - **历史与传统**：  \n     你的身份可能也受到家族、民族、历史背景的影响。\n\n---\n\n### 5. **诗意与隐喻**\n   - **“我是谁？”可以是一场旅程**：  \n     像《小王子》中的玫瑰，你可能需要通过爱与经历才能真正理解自己。\n   - **“我”是流动的**：  \n     每个瞬间的思考、感受、选择都在重新定义“我”。\n\n---\n\n### 如果你此刻感到困惑：\n- **允许自己不确定**：  \n  “我是谁”可能没有标准答案，甚至可能随着人生阶段不断变化。\n- **提问本身已是一种探索**：  \n  这个问题本身表明你正在思考、觉察，这是自我认知的重要一步。\n- **与他人对话**：  \n  朋友、书籍、艺术作品或许能提供新的视角。\n\n---\n\n最终，“你是谁”或许不是一道需要“解答”的题，而是一段持续的自我对话。你愿意和我分享你此刻的感受吗？或许我们可以一起探索。 🌱'}], id='2025-08-19 09:25:23.803_5923d4', created_at='2025-08-19 09:25:23.803', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=1091, time=19.932566, type='chat'))




.. GENERATED FROM PYTHON SOURCE LINES 187-195

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 195-216

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 217-222

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 23.592 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
