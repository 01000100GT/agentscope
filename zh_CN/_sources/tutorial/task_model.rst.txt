
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 66-91

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-08-18 07:19:51.638_027f31', created_at='2025-08-18 07:19:51.638', type='chat', usage=None)




.. GENERATED FROM PYTHON SOURCE LINES 92-93

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 93-118

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], id='2025-08-18 07:19:53.006_b2ef53', created_at='2025-08-18 07:19:53.006', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=8, time=1.367131, type='chat'))
    作为 Msg 的响应: Msg(id='c3kk5RE7wmMBpFJYeJoVyh', name='Friday', content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-08-18 07:19:53.006', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 119-126

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 126-156

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-08-18 07:19:53.942_db0e73', created_at='2025-08-18 07:19:53.942', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=0.935095, type='chat'))

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-08-18 07:19:54.009_97a69b', created_at='2025-08-18 07:19:54.009', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.001217, type='chat'))

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-08-18 07:19:54.525_06d97a', created_at='2025-08-18 07:19:54.525', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.517602, type='chat'))

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-08-18 07:19:54.602_6fb22a', created_at='2025-08-18 07:19:54.602', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.594281, type='chat'))

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-08-18 07:19:54.762_55ecec', created_at='2025-08-18 07:19:54.762', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.754554, type='chat'))

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-08-18 07:19:55.568_cbba71', created_at='2025-08-18 07:19:55.568', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=2.560931, type='chat'))

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-08-18 07:19:56.133_40182a', created_at='2025-08-18 07:19:56.133', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=3.125449, type='chat'))

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-08-18 07:19:56.259_400815', created_at='2025-08-18 07:19:56.259', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=3.25142, type='chat'))

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-08-18 07:19:56.424_5bf5f0', created_at='2025-08-18 07:19:56.424', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=3.416204, type='chat'))

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-08-18 07:19:56.553_f38bc0', created_at='2025-08-18 07:19:56.553', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=3.545403, type='chat'))

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-08-18 07:19:56.788_b20612', created_at='2025-08-18 07:19:56.788', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.780703, type='chat'))

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-08-18 07:19:56.876_156a0c', created_at='2025-08-18 07:19:56.876', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.868449, type='chat'))





.. GENERATED FROM PYTHON SOURCE LINES 157-161

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 161-186

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这是一个哲学性的问题。首先，我需要理解用户为什么会提出这个问题。可能是在思考自我身份，或者对存在感到困惑。接下来，我应该考虑如何回答这个问题，既要有深度又不能太抽象。\n\n可以从哲学角度入手，比如引用笛卡尔的“我思故我在”，说明自我意识的重要性。然后提到心理学中的自我认同理论，比如埃里克森的发展阶段，帮助用户理解自我是如何形成的。同时，可以加入一些现代的观点，比如社会建构主义，说明身份是社会互动的结果。\n\n还要考虑用户可能的背景，如果他们正在经历身份危机或寻找人生方向，可能需要更具体的建议。但用户的问题比较普遍，所以保持回答的广泛性比较重要。另外，避免使用过于学术化的语言，让回答更易懂。\n\n可能还需要提醒用户，这个问题没有标准答案，每个人的答案都不同。鼓励他们自我反思，探索自己的价值观和兴趣。最后，保持开放和友好的语气，让用户感到被理解和支持。'}, {'type': 'text', 'text': '“我是谁？”是一个深刻而复杂的问题，涉及哲学、心理学、社会学等多个层面。不同的人可能会从不同的角度给出不同的答案。以下是一些可能的思考方向：\n\n---\n\n### 1. **哲学视角：自我与存在**\n   - **笛卡尔**（René Descartes）说：“我思故我在”（*Cogito, ergo sum*）。他认为，即使怀疑一切，思考本身证明了“我”的存在。\n   - **存在主义**（如萨特）认为，人没有预设的本质，而是通过选择和行动“成为”自己。你定义自己，而非被定义。\n   - **佛教**则可能认为，“我”是暂时的、流动的，是五蕴（色、受、想、行、识）的组合，执着于“我”会导致痛苦。\n\n---\n\n### 2. **心理学视角：自我认同**\n   - **埃里克森**（Erik Erikson）的“心理社会发展理论”指出，人的身份是在与社会互动中逐渐形成的。例如，青少年时期会探索“我是谁”的问题。\n   - **自我概念**（Self-concept）包括你对自己的认知（如“我是一个善良的人”）和他人对你的看法（如“别人认为我是个可靠的人”）。\n   - **内在冲突**：有时“我是谁”可能伴随着矛盾（比如“我想自由，但又被责任束缚”），这反映了自我意识的复杂性。\n\n---\n\n### 3. **社会与文化视角：身份的建构**\n   - **社会角色**：你是学生、员工、父母、朋友……这些角色共同构成了你的身份。\n   - **文化影响**：家庭、教育、社会规范等塑造了你的价值观和行为模式。例如，某些文化强调集体主义，而另一些则更重视个人主义。\n   - **流动性**：身份并非固定。随着经历、环境和时间的变化，你可能不断重新定义自己。\n\n---\n\n### 4. **科学视角：生物学与意识**\n   - 从神经科学角度看，“我”可能是大脑活动的产物。你的记忆、情感、思维都是大脑神经元的活动结果。\n   - 但意识的“主观体验”（即“我感”）仍然是科学未解之谜。你是否只是复杂的生物机器，还是拥有某种更深层的“自我”？\n\n---\n\n### 5. **个人探索：你自己的答案**\n   - **反思**：你可以问自己：\n     - 我的核心价值观是什么？\n     - 我最珍视的是什么？（如自由、爱、成就、意义）\n     - 我希望未来成为什么样的人？\n   - **行动**：通过尝试新事物、与他人互动、学习和成长，你可能会逐渐发现“我是谁”的答案。\n\n---\n\n### 6. **可能的答案（开放性）**\n   - **“我是一个正在寻找答案的人。”**\n   - **“我是由我的选择、经历和关系构成的。”**\n   - **“我可能永远无法完全定义自己，但探索的过程本身就是意义。”**\n\n---\n\n最终，“我是谁”没有标准答案，它是一个持续的过程。或许，真正的答案不在于找到一个固定的结论，而在于接纳自己的不确定性，并在探索中不断成长。你愿意和我分享更多关于你自己的想法吗？'}], id='2025-08-18 07:20:10.423_8cfffa', created_at='2025-08-18 07:20:10.423', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=910, time=13.543519, type='chat'))




.. GENERATED FROM PYTHON SOURCE LINES 187-195

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 195-216

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 217-222

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 18.788 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
