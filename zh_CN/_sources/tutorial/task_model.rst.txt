
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 66-91

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-08-19 03:50:36.424_0639ec', created_at='2025-08-19 03:50:36.424', type='chat', usage=None)




.. GENERATED FROM PYTHON SOURCE LINES 92-93

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 93-118

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-08-19 03:50:38.414_4d4750', created_at='2025-08-19 03:50:38.414', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=1.988873, type='chat'))
    作为 Msg 的响应: Msg(id='bjrXuHQMNVyXnH2F82pies', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-08-19 03:50:38.414', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 119-126

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 126-156

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-08-19 03:50:39.489_374375', created_at='2025-08-19 03:50:39.489', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.073823, type='chat'))

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-08-19 03:50:39.553_9eee1e', created_at='2025-08-19 03:50:39.553', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.1375, type='chat'))

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2'}], id='2025-08-19 03:50:39.583_ac7505', created_at='2025-08-19 03:50:39.583', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=3, time=1.167989, type='chat'))

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n'}], id='2025-08-19 03:50:39.630_57791b', created_at='2025-08-19 03:50:39.630', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=4, time=1.214511, type='chat'))

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-08-19 03:50:39.819_6bc4d6', created_at='2025-08-19 03:50:39.819', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.403944, type='chat'))

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n'}], id='2025-08-19 03:50:40.335_8dd8e4', created_at='2025-08-19 03:50:40.335', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=12, time=1.919803, type='chat'))

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n'}], id='2025-08-19 03:50:40.553_e188ab', created_at='2025-08-19 03:50:40.553', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=16, time=2.137855, type='chat'))

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-08-19 03:50:40.760_dfc591', created_at='2025-08-19 03:50:40.760', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=2.345177, type='chat'))

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n'}], id='2025-08-19 03:50:40.932_045880', created_at='2025-08-19 03:50:40.932', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=24, time=2.516761, type='chat'))

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n1'}], id='2025-08-19 03:50:41.126_0be831', created_at='2025-08-19 03:50:41.126', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=28, time=2.711106, type='chat'))

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-08-19 03:50:41.426_9a44b4', created_at='2025-08-19 03:50:41.426', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=3.010816, type='chat'))

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n'}], id='2025-08-19 03:50:41.972_b80b46', created_at='2025-08-19 03:50:41.972', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=36, time=3.556785, type='chat'))

    块 12
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n1'}], id='2025-08-19 03:50:42.687_495307', created_at='2025-08-19 03:50:42.687', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=40, time=4.271959, type='chat'))

    块 13
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-08-19 03:50:42.878_be00f6', created_at='2025-08-19 03:50:42.878', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=4.462907, type='chat'))

    块 14
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n'}], id='2025-08-19 03:50:43.074_2aa1d8', created_at='2025-08-19 03:50:43.074', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=48, time=4.658672, type='chat'))

    块 15
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-08-19 03:50:43.266_9dd74f', created_at='2025-08-19 03:50:43.266', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=4.850426, type='chat'))

    块 16
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-08-19 03:50:43.287_e388ab', created_at='2025-08-19 03:50:43.287', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=4.871901, type='chat'))





.. GENERATED FROM PYTHON SOURCE LINES 157-161

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 161-186

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这个问题看起来简单，但其实挺深奥的。首先，我需要考虑用户为什么会问这个问题。可能他们正在经历自我怀疑，或者对自我身份感到困惑。也有可能是在进行哲学思考，或者只是好奇。\n\n接下来，我要分析这个问题的不同层面。从心理学角度，自我认知是个人对自己身份、价值观、能力的认识。用户可能在寻找自我认同，或者需要帮助来理解自己的内心世界。从哲学角度来看，这可能涉及到存在主义的问题，比如“我是谁”是关于存在的本质。\n\n然后，我需要考虑用户的背景。他们可能是在压力下，或者生活中遇到了重大变化，导致对自我产生疑问。也有可能是年轻人在成长过程中探索自我，或者成年人在经历人生转折点时的反思。\n\n还要注意用户可能没有直接表达的需求。比如，他们可能希望得到情感支持，或者需要具体的建议来帮助他们自我探索。也可能是在寻找某种归属感或目的感。\n\n接下来，我应该提供一个全面但不过于复杂的回答。需要涵盖不同的角度，如心理学、哲学、日常身份，同时保持同理心。避免使用专业术语过多，保持口语化，让用户感到被理解。\n\n还要检查是否有文化或个人因素影响。比如，不同文化对自我认知的看法可能不同，但用户可能没有说明，所以保持中立和普遍性比较重要。\n\n最后，确保回答结构清晰，分点说明，但不过于机械。可能需要加入一些鼓励的话语，让用户知道这是正常的现象，并且有多种方式可以探索答案。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却蕴含着深刻的哲学与自我探索的意义。它可能源于对自我身份的困惑、对生命意义的思考，或是对内心世界的追问。以下是一些可能的方向，或许能帮助你更接近答案：\n\n---\n\n### 1. **从日常身份出发**\n   - **社会角色**：你是谁？可能是某个职业（如学生、医生、艺术家）、家庭角色（如父母、子女）或朋友。这些身份是他人和社会赋予你的标签，但它们只是你的一部分。\n   - **生理特征**：你的年龄、性别、外貌、性格特质（如内向/外向）等，构成了你独特的“生物性”身份。\n\n---\n\n### 2. **从心理与意识层面**\n   - **自我认知**：你对自己的想法、感受、价值观和信念的觉察。例如，你可能认为自己是一个善良的人，或是一个追求自由的人。\n   - **内在冲突**：有时“我是谁”会引发矛盾——比如你渴望独立，却依赖他人；想要改变，却害怕改变。这种挣扎本身就是自我探索的一部分。\n\n---\n\n### 3. **从哲学角度**\n   - **存在主义**：萨特说“存在先于本质”，意味着你通过选择和行动定义自己。你不是被预先决定的，而是通过生活不断“成为”自己。\n   - **佛教视角**：许多东方哲学认为“自我”是流动的、无常的，执着于“我是谁”的答案反而可能成为束缚。禅宗常强调“不立文字”，直接体验当下的存在。\n\n---\n\n### 4. **从情感与关系中**\n   - **他人的视角**：别人眼中的你可能与你对自己的认知不同。比如，朋友可能觉得你幽默，而你自己却觉得自己沉默寡言。\n   - **情感联结**：你可能通过爱、友情、责任等关系感受到自己的存在。比如，作为父母，你可能在照顾孩子时更清晰地意识到自己的角色。\n\n---\n\n### 5. **从不确定中寻找答案**\n   - **“我是谁”可能没有标准答案**：许多人一生都在探索这个问题。它可能没有终点，但过程本身就有意义。\n   - **接受模糊性**：允许自己“不知道”，反而能更自由地尝试、改变和成长。你不必急于定义自己，而是通过行动和体验逐渐靠近答案。\n\n---\n\n### 如果你感到困惑，可以尝试：\n- **写日记**：记录每天的感受、想法和选择，观察哪些模式反复出现。\n- **提问自己**：  \n  - 我最珍视什么？  \n  - 我害怕什么？  \n  - 如果没有社会期待，我会成为什么样的人？  \n- **与他人对话**：朋友、家人或心理咨询师可能提供新的视角。\n\n---\n\n最终，“我是谁”可能是一个动态的过程，而非固定的答案。你既是过去经历的产物，也是未来可能性的创造者。允许自己在这个过程中不断探索、改变，或许就是答案本身。 🌱'}], id='2025-08-19 03:50:54.332_922a54', created_at='2025-08-19 03:50:54.332', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=959, time=11.041607, type='chat'))




.. GENERATED FROM PYTHON SOURCE LINES 187-195

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 195-216

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 217-222

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 17.911 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
