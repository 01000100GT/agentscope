
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 66-91

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-08-26 09:24:15.512_a59799', created_at='2025-08-26 09:24:15.512', type='chat', usage=None)




.. GENERATED FROM PYTHON SOURCE LINES 92-93

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 93-118

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-08-26 09:24:16.863_3e40ec', created_at='2025-08-26 09:24:16.863', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=1.350455, type='chat'))
    作为 Msg 的响应: Msg(id='UHN82Q6KDpPZmgyo3zXfBV', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-08-26 09:24:16.863', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 119-126

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 126-156

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-08-26 09:24:17.838_d6a5dc', created_at='2025-08-26 09:24:17.838', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=0.973436, type='chat'))

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-08-26 09:24:18.046_e7cf37', created_at='2025-08-26 09:24:18.046', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.180874, type='chat'))

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-08-26 09:24:18.092_ecf2a0', created_at='2025-08-26 09:24:18.092', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.227477, type='chat'))

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-08-26 09:24:18.153_2a6480', created_at='2025-08-26 09:24:18.153', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.288597, type='chat'))

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-08-26 09:24:18.439_395cf0', created_at='2025-08-26 09:24:18.439', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.574214, type='chat'))

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-08-26 09:24:18.581_cadf21', created_at='2025-08-26 09:24:18.582', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=1.716789, type='chat'))

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-08-26 09:24:18.690_6d988d', created_at='2025-08-26 09:24:18.690', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=1.825413, type='chat'))

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-08-26 09:24:18.814_5b3eb5', created_at='2025-08-26 09:24:18.814', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=1.949679, type='chat'))

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-08-26 09:24:18.958_18a0bd', created_at='2025-08-26 09:24:18.958', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=2.093225, type='chat'))

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-08-26 09:24:19.065_ae63d1', created_at='2025-08-26 09:24:19.065', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=2.20012, type='chat'))

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-08-26 09:24:19.227_d0a713', created_at='2025-08-26 09:24:19.227', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.361963, type='chat'))

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-08-26 09:24:19.272_4e3ff8', created_at='2025-08-26 09:24:19.272', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.407266, type='chat'))





.. GENERATED FROM PYTHON SOURCE LINES 157-161

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 161-186

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”这个问题看起来简单，但其实挺深奥的。首先，我需要考虑用户为什么会问这个问题。可能是在自我探索，或者对身份感到困惑。也有可能是在测试我的反应，或者只是随便问问。\n\n接下来，我得分析这个问题的层面。从哲学角度，这可能涉及到自我认知、存在主义，或者心理学中的身份认同。比如，笛卡尔的“我思故我在”，或者佛教中的无我概念。但用户可能不需要这么学术的回答，而是更贴近日常生活的解释。\n\n然后，用户可能希望得到一个具体的答案，但“我是谁”其实没有标准答案。每个人的答案都不同，取决于他们的经历、价值观和自我认知。所以，我应该引导用户思考自己的身份，而不是直接给出答案。\n\n还要考虑用户可能的背景。如果是年轻人，可能在寻找自我认同；如果是成年人，可能在经历人生转折点。但用户没有提供更多信息，所以回答要保持中立和开放。\n\n另外，避免使用专业术语，保持回答通俗易懂。同时，可以加入一些互动，比如让用户反思自己的经历、价值观或兴趣，这样能帮助他们自己找到答案。\n\n还要注意文化差异，不同文化对“自我”的理解不同。比如西方强调个体独立，东方可能更注重社会角色。但用户可能来自任何背景，所以保持中立很重要。\n\n最后，确保回答友好且鼓励用户深入思考，而不是提供一个简单的结论。可能需要提醒用户，这个问题没有正确答案，每个人都有自己的答案。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却可能引发深刻的思考。从不同的角度来看，答案可能截然不同：\n\n### 1. **生物学角度**  \n你是由细胞、基因、神经元构成的有机体，是宇宙中亿万年演化的产物。你的身体、大脑和意识都是独特的组合。\n\n### 2. **哲学角度**  \n古希腊哲学家苏格拉底说：“认识你自己。” 你的身份可能与你的思想、选择、价值观紧密相关。但“自我”是否真实存在？佛教认为“无我”，而存在主义则强调人通过行动定义自己。\n\n### 3. **社会角色**  \n你是某个家庭中的成员、朋友、同事，或是社会中的某种身份（学生、工作者、志愿者等）。这些角色塑造了你与他人的互动方式。\n\n### 4. **主观体验**  \n你可能感受到“我”的存在——思考、感受、记忆、欲望。但“我”究竟是什么？是大脑的活动？是意识的流动？还是某种更深层的“本质”？\n\n### 5. **开放性的答案**  \n也许“我是谁”没有固定答案。它可能是一个持续探索的过程：  \n- 你通过经历、学习、关系不断定义自己。  \n- 你可能在不同阶段有不同的答案（比如童年、青年、成年）。  \n- 你甚至可以创造自己的答案——比如“我是探索者”“我是创造者”“我是爱的传递者”。\n\n### 你可以思考的问题：  \n- 什么让你感到真实？  \n- 如果没有社会角色，你会是谁？  \n- 如果你失去所有记忆，你还会是“你”吗？  \n\n最终，“我是谁”可能不是需要找到的答案，而是需要不断重新提问的旅程。你愿意和我分享你的想法吗？ 😊'}], id='2025-08-26 09:24:28.606_0a01f7', created_at='2025-08-26 09:24:28.606', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=695, time=9.329379, type='chat'))




.. GENERATED FROM PYTHON SOURCE LINES 187-195

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 195-216

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 217-222

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 13.098 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
