
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 66-91

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-08-19 09:34:13.500_e330b2', created_at='2025-08-19 09:34:13.500', type='chat', usage=None)




.. GENERATED FROM PYTHON SOURCE LINES 92-93

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 93-118

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], id='2025-08-19 09:34:15.287_a2798b', created_at='2025-08-19 09:34:15.287', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=8, time=1.786073, type='chat'))
    作为 Msg 的响应: Msg(id='adMHjRrEGiyUmdd5eqoWi9', name='Friday', content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-08-19 09:34:15.287', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 119-126

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 126-156

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-08-19 09:34:16.386_f13e43', created_at='2025-08-19 09:34:16.386', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.096909, type='chat'))

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-08-19 09:34:16.432_8514d6', created_at='2025-08-19 09:34:16.432', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.143335, type='chat'))

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2'}], id='2025-08-19 09:34:16.477_8d2fee', created_at='2025-08-19 09:34:16.477', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=3, time=1.188183, type='chat'))

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n'}], id='2025-08-19 09:34:16.523_dab19b', created_at='2025-08-19 09:34:16.523', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=4, time=1.233844, type='chat'))

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-08-19 09:34:16.707_df3cae', created_at='2025-08-19 09:34:16.707', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.417727, type='chat'))

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n'}], id='2025-08-19 09:34:16.889_cf1281', created_at='2025-08-19 09:34:16.889', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=12, time=1.59996, type='chat'))

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n'}], id='2025-08-19 09:34:17.072_16a094', created_at='2025-08-19 09:34:17.072', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=16, time=1.783293, type='chat'))

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-08-19 09:34:17.277_2fa8c8', created_at='2025-08-19 09:34:17.277', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=1.9883, type='chat'))

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n'}], id='2025-08-19 09:34:17.441_9689b7', created_at='2025-08-19 09:34:17.441', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=24, time=2.152317, type='chat'))

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n1'}], id='2025-08-19 09:34:17.624_da1f9a', created_at='2025-08-19 09:34:17.625', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=28, time=2.335626, type='chat'))

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-08-19 09:34:17.805_7fceaa', created_at='2025-08-19 09:34:17.805', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=2.516406, type='chat'))

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n'}], id='2025-08-19 09:34:18.009_dfb06b', created_at='2025-08-19 09:34:18.009', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=36, time=2.719738, type='chat'))

    块 12
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n1'}], id='2025-08-19 09:34:18.172_9d32bf', created_at='2025-08-19 09:34:18.172', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=40, time=2.882672, type='chat'))

    块 13
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-08-19 09:34:18.354_a367c3', created_at='2025-08-19 09:34:18.354', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=3.065273, type='chat'))

    块 14
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n'}], id='2025-08-19 09:34:18.536_bded56', created_at='2025-08-19 09:34:18.536', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=48, time=3.247284, type='chat'))

    块 15
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-08-19 09:34:18.673_1ad8c9', created_at='2025-08-19 09:34:18.673', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.383899, type='chat'))

    块 16
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-08-19 09:34:18.693_9849f4', created_at='2025-08-19 09:34:18.693', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.404145, type='chat'))





.. GENERATED FROM PYTHON SOURCE LINES 157-161

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 161-186

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这个问题看起来简单，但其实很深刻。首先，我需要理解用户为什么会问这个问题。可能的情况有很多：用户可能在思考自我身份，或者对自身存在感到困惑，也可能是在进行哲学探索，或者只是出于好奇。\n\n接下来，我得考虑用户的身份。他可能是一个普通用户，对自我认知有疑问，或者是一个学生在做相关课题，也可能是有心理压力的人在寻求帮助。不过，用户没有提供更多信息，所以需要保持回答的通用性。\n\n然后，分析问题的深层需求。用户可能想知道自己的身份、存在的意义，或者寻找自我认同。也有可能是在测试我的反应，或者想进行更深入的对话。这时候需要平衡回答的深度和广度，既不能太抽象，也不能太肤浅。\n\n考虑到用户可能需要不同角度的回答，比如哲学、心理学、科学等。例如，从哲学角度看，这可能涉及笛卡尔的“我思故我在”，或者存在主义的观点。心理学方面，可能涉及自我认同的发展阶段，如埃里克森的理论。科学角度可能涉及大脑和意识的研究。\n\n同时，要注意避免给出过于主观或可能引起误解的答案。比如，不能简单地说“你是你自己”，因为这可能不够深入。需要提供多方面的视角，让用户自己思考。\n\n还要考虑用户可能的后续问题。如果用户继续追问，可能需要引导他们思考具体方面，比如价值观、经历、人际关系等。因此，回答应该开放，鼓励进一步探讨。\n\n最后，确保语言自然，避免使用专业术语过多，保持口语化，让用户感到亲切和易于理解。同时，保持回答的中立和客观，不带有个人偏见。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却触及人类存在的核心。不同的角度可能会有不同的答案：\n\n### 1. **哲学视角**  \n   - **笛卡尔**说：“我思故我在。”（*Cogito, ergo sum*）  \n     意味着思考本身证明了你的存在。但“我”是否仅限于思维？还是包含身体、情感、记忆？  \n   - **存在主义**（如萨特）认为，“人是被抛入世界的”，你的身份是通过选择和行动不断塑造的。  \n   - **东方哲学**（如佛教）可能认为“我”是暂时的、流动的，是五蕴（色、受、想、行、识）的聚合，并非永恒不变的实体。\n\n### 2. **心理学视角**  \n   - **自我认同**是通过经历、关系、价值观和目标逐渐形成的。  \n   - **埃里克森**的理论指出，人生不同阶段会面临“身份 vs 角色混乱”的挑战。  \n   - **创伤或压力**可能让人暂时迷失“自我”，但这也可能成为重新定义自己的契机。\n\n### 3. **科学视角**  \n   - 从生物学看，你是基因、神经元、细胞构成的复杂系统。  \n   - 从量子物理看，你的身体由基本粒子组成，而“你”的意识可能与大脑的量子活动有关（但这一领域仍存争议）。  \n   - 神经科学发现，大脑的“自我”是多个区域协同工作的结果，而非单一实体。\n\n### 4. **日常生活的答案**  \n   - 你是**父母的孩子**、**朋友的伙伴**、**社会的一员**。  \n   - 你是**过去经历的总和**，也是未来可能性的起点。  \n   - 你可能在寻找意义，但“我是谁”或许不是需要答案的问题，而是需要**持续探索**的过程。\n\n### 5. **一个更简单的思考方式**  \n   如果你问“我是谁”，或许可以反问自己：  \n   - **我最珍视什么？**（价值观）  \n   - **我如何与他人互动？**（人际关系）  \n   - **我的独特性在哪里？**（天赋、兴趣、经历）  \n   - **我希望成为怎样的人？**（目标与理想）\n\n---\n\n最终，“你是谁”可能没有标准答案，但每一次追问本身，都是对自我更深层的觉察。也许答案就藏在你此刻的思考中。如果愿意，可以试着写下你对自己的描述——哪怕只是一句话，它可能成为你理解自己的起点。'}], id='2025-08-19 09:34:31.640_b87c50', created_at='2025-08-19 09:34:31.640', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=908, time=12.942858, type='chat'))




.. GENERATED FROM PYTHON SOURCE LINES 187-195

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 195-216

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 217-222

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 18.143 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
