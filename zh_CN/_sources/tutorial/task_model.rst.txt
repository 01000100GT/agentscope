
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 66-91

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-08-15 10:19:32.525_f5ab9f', created_at='2025-08-15 10:19:32.525', type='chat', usage=None)




.. GENERATED FROM PYTHON SOURCE LINES 92-93

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 93-118

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-08-15 10:19:33.961_5ccc1a', created_at='2025-08-15 10:19:33.961', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=1.434642, type='chat'))
    作为 Msg 的响应: Msg(id='PtVqapt9UcwZVApiyiEVCE', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-08-15 10:19:33.961', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 119-126

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 126-156

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-08-15 10:19:35.212_a4d1b9', created_at='2025-08-15 10:19:35.212', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.249947, type='chat'))

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-08-15 10:19:35.279_278e6f', created_at='2025-08-15 10:19:35.279', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.317098, type='chat'))

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-08-15 10:19:35.352_f7d97d', created_at='2025-08-15 10:19:35.352', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.38942, type='chat'))

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-08-15 10:19:35.425_0e7847', created_at='2025-08-15 10:19:35.425', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.462744, type='chat'))

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-08-15 10:19:35.565_2acd25', created_at='2025-08-15 10:19:35.565', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.602854, type='chat'))

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-08-15 10:19:35.720_1c7ca0', created_at='2025-08-15 10:19:35.720', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=1.757877, type='chat'))

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-08-15 10:19:35.840_aa4fc9', created_at='2025-08-15 10:19:35.840', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=1.878108, type='chat'))

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-08-15 10:19:35.981_029f6a', created_at='2025-08-15 10:19:35.981', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=2.018503, type='chat'))

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-08-15 10:19:36.136_c9e3db', created_at='2025-08-15 10:19:36.136', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=2.174078, type='chat'))

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-08-15 10:19:36.257_31a5a1', created_at='2025-08-15 10:19:36.257', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=2.295195, type='chat'))

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-08-15 10:19:36.395_909122', created_at='2025-08-15 10:19:36.395', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.433179, type='chat'))

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-08-15 10:19:36.482_e1d4a6', created_at='2025-08-15 10:19:36.482', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.51972, type='chat'))





.. GENERATED FROM PYTHON SOURCE LINES 157-161

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 161-186

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这是一个哲学性的问题，可能需要从多个角度来回答。首先，我需要考虑用户为什么会问这个问题。可能是在探索自我身份，或者对存在感到困惑。接下来，我应该思考如何用不同的方式来解答这个问题，比如哲学、心理学、宗教等角度。\n\n用户可能希望得到一个全面的回答，而不仅仅是简单的定义。可能需要结合不同的理论，比如笛卡尔的“我思故我在”，或者佛教中的无我概念。同时，也要考虑到用户可能的背景，如果是学生，可能需要更学术性的解释；如果是普通用户，可能需要更通俗易懂的语言。\n\n另外，要注意避免过于抽象或晦涩的解释，保持回答的亲和力。可能需要分点说明，每个角度简要介绍，让用户有选择地理解。同时，可以加入一些例子或类比，帮助用户更好地理解。\n\n还要检查是否有文化差异需要注意的地方，比如不同文化对自我认知的不同看法。此外，是否需要建议用户进行自我反思或推荐相关书籍、资源？可能需要在回答中适当提及，但不要过于冗长。\n\n最后，确保回答结构清晰，逻辑连贯，语言自然，避免使用专业术语过多，必要时进行解释。同时，保持开放式的结尾，鼓励用户进一步思考或提问。\n'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却蕴含着深刻的哲学、心理学和存在主义思考。不同的人、不同的文化、不同的思想体系可能会给出截然不同的答案。以下是一些可能的视角，或许能帮助你更深入地探索这个问题：\n\n---\n\n### 1. **哲学视角：存在与本质**\n   - **笛卡尔**（René Descartes）说：“我思故我在。”（*Cogito, ergo sum*）  \n     他认为，即使怀疑一切，唯一无法被怀疑的是“我正在思考”这一事实。因此，“我”是思考的主体，是存在的证明。\n   - **存在主义**（如萨特、海德格尔）认为，“人先存在，然后定义自己”。  \n     你不是被预先定义的“谁”，而是通过选择、行动和责任不断塑造自己的本质。\n   - **佛教**则提出“无我”（Anatta）的概念，认为“我”只是五蕴（色、受、想、行、识）的暂时组合，没有永恒的自性。\n\n---\n\n### 2. **心理学视角：自我认知**\n   - **弗洛伊德**将“我”分为三个部分：**本我**（本能）、**自我**（现实中的调节者）和**超我**（道德约束）。  \n     你的行为可能是这些内在冲突的结果。\n   - **荣格**提出“个体化”（Individuation）的过程，认为“我”是整合意识与潜意识、个体与集体无意识的统一。\n   - **现代心理学**认为，“自我”是动态的，由记忆、经历、社会角色和文化背景共同构建。  \n     你可能在不同情境中扮演不同的“角色”（如朋友、同事、子女），但这些都只是“我”的一部分。\n\n---\n\n### 3. **宗教与灵性视角**\n   - **基督教**认为“我”是上帝创造的个体，灵魂与肉体的结合体，最终目标是与神合一。\n   - **印度教**强调“梵我合一”（Brahman-Atman），认为个体的“我”（Atman）与宇宙的终极实在（Brahman）本质上是同一的。\n   - **道教**主张“道法自然”，认为“我”是自然的一部分，应顺应天性，追求“无我”的境界。\n\n---\n\n### 4. **科学视角：生物学与神经科学**\n   - 从生物学角度看，“我”是基因、大脑神经元活动和身体器官的产物。  \n     你的意识、情感、记忆都源于大脑的复杂运作。\n   - 神经科学发现，所谓的“自我意识”可能只是大脑对自身状态的模拟。  \n     例如，某些实验显示，人类的“自我”可能是一种“幻觉”或“叙事构建”。\n\n---\n\n### 5. **日常生活的视角：身份与角色**\n   - 你可能是某个家庭中的成员、某个职业中的从业者、某个社群中的参与者。  \n     这些角色共同构成了你对“我是谁”的感知。\n   - 但身份往往是流动的。比如，你可能今天是学生，明天是父母，后天是志愿者——“我”在不同场景中不断变化。\n\n---\n\n### 6. **反问与探索：你为何问“我是谁”？**\n   - 这个问题可能源于对**存在意义**的困惑，或对**自我认同**的迷茫。\n   - 有时，提问本身比答案更重要。你可以尝试：\n     - 记录自己的想法、感受和经历，观察哪些特质反复出现？\n     - 问问身边的人：“你觉得我是怎样的人？”（但注意，他人的看法可能只是片面的投影。）\n     - 通过艺术、写作、冥想等方式，与内在的“我”对话。\n\n---\n\n### 最后，或许答案并不重要，重要的是你如何与这个问题共处。  \n“我是谁？”可能没有终极答案，但正是这种追问本身，让生命充满探索的意义。你愿意和我一起继续思考吗？ 🌱'}], id='2025-08-15 10:19:54.282_b707df', created_at='2025-08-15 10:19:54.282', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=1139, time=17.796403, type='chat'))




.. GENERATED FROM PYTHON SOURCE LINES 187-195

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 195-216

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 217-222

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 21.760 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
