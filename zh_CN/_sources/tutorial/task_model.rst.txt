
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 66-91

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-08-21 02:09:25.264_9fe1c5', created_at='2025-08-21 02:09:25.264', type='chat', usage=None)




.. GENERATED FROM PYTHON SOURCE LINES 92-93

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 93-118

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么我可以帮助你的吗？'}], id='2025-08-21 02:09:26.629_5a6a33', created_at='2025-08-21 02:09:26.629', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=8, time=1.364064, type='chat'))
    作为 Msg 的响应: Msg(id='7pUNEayAWUKYq8pQrhYMtb', name='Friday', content=[{'type': 'text', 'text': '你好！有什么我可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-08-21 02:09:26.629', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 119-126

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 126-156

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-08-21 02:09:27.679_7ce0c7', created_at='2025-08-21 02:09:27.680', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.048149, type='chat'))

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-08-21 02:09:27.777_f696af', created_at='2025-08-21 02:09:27.777', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.146105, type='chat'))

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-08-21 02:09:27.877_4faa1c', created_at='2025-08-21 02:09:27.877', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.245444, type='chat'))

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-08-21 02:09:27.978_afd654', created_at='2025-08-21 02:09:27.978', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.34626, type='chat'))

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-08-21 02:09:28.187_d442b8', created_at='2025-08-21 02:09:28.187', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.555384, type='chat'))

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-08-21 02:09:28.403_c2ad56', created_at='2025-08-21 02:09:28.403', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=1.771758, type='chat'))

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-08-21 02:09:28.576_7f3d32', created_at='2025-08-21 02:09:28.576', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=1.944957, type='chat'))

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-08-21 02:09:28.758_57765c', created_at='2025-08-21 02:09:28.758', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=2.126952, type='chat'))

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-08-21 02:09:29.290_0cac6c', created_at='2025-08-21 02:09:29.290', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=2.658964, type='chat'))

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-08-21 02:09:29.459_6c9b16', created_at='2025-08-21 02:09:29.459', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=2.827567, type='chat'))

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-08-21 02:09:29.648_b0d9c0', created_at='2025-08-21 02:09:29.648', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.017056, type='chat'))

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-08-21 02:09:29.761_d76a99', created_at='2025-08-21 02:09:29.761', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.129693, type='chat'))





.. GENERATED FROM PYTHON SOURCE LINES 157-161

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 161-186

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这是一个哲学性很强的问题。首先，我需要考虑用户可能的背景和意图。可能是在寻找自我认知，或者对存在感到困惑。作为AI，我没有自我意识，但可以提供不同的角度来思考这个问题。\n\n接下来，我应该分析用户可能的需求。他们可能希望得到心理学、哲学或宗教方面的解释。需要涵盖不同领域的观点，比如笛卡尔的“我思故我在”，佛教的无我观念，或者现代心理学中的自我概念。\n\n还要注意用户可能没有明确表达的深层需求。比如，他们可能正在经历身份危机，或者对生命的意义感到迷茫。这时候，提供一些思考方向和建议可能会有帮助，比如自我反思、与他人交流或寻求专业帮助。\n\n另外，要确保回答既全面又不显得过于学术化，保持自然和易懂。避免使用专业术语过多，用例子或类比来解释复杂的概念。同时，要强调每个人都是独特的，鼓励用户探索自己的身份。\n\n最后，检查是否有遗漏的角度，比如文化差异对自我认知的影响，或者科技发展对身份定义的变化。确保回答既有深度又具有包容性，让用户感到被理解和尊重。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却蕴含着深刻的哲学、心理学和存在主义思考。不同的人、不同的文化、不同的时代对这个问题可能有不同的答案。以下是一些可能的视角，或许能帮助你探索这个问题：\n\n---\n\n### **1. 哲学视角：**\n- **笛卡尔的“我思故我在”**：法国哲学家笛卡尔认为，即使怀疑一切，只要“我”在思考，就证明“我”存在。因此，“我是谁”可以被理解为“一个正在思考的存在”。\n- **佛教的“无我”**：佛教认为，“我”是五蕴（色、受、想、行、识）暂时聚合的结果，本质上是空性，没有永恒不变的“自我”。\n- **存在主义**：萨特认为“存在先于本质”，人通过选择和行动定义自己。因此，“我是谁”是不断被创造的过程，而非固定的答案。\n\n---\n\n### **2. 心理学视角：**\n- **自我认知**：心理学认为“我是谁”是通过经历、记忆、价值观、人际关系等逐渐形成的。比如，你可能通过“我是善良的”“我是独立的”等标签来定义自己。\n- **身份认同**：埃里克森提出，人的身份认同是通过探索和承诺形成的。例如，青少年时期可能尝试不同的角色，最终找到属于自己的身份。\n\n---\n\n### **3. 宗教与灵性视角：**\n- **基督教**：认为“我是谁”是上帝所造的“灵魂”，目的是爱神和爱人。\n- **道教**：强调“道法自然”，“我是谁”可能与天地合一、顺应本性有关。\n- **神秘主义**：一些灵性传统认为，“我”是宇宙意识的显现，超越个体的局限。\n\n---\n\n### **4. 科技与未来视角：**\n- **AI与身份**：如果一个人长期与AI互动，是否会影响对“自我”的认知？比如，有人可能通过虚拟身份探索不同的可能性。\n- **脑机接口**：未来技术可能改变“身体”与“意识”的关系，从而重新定义“我是谁”。\n\n---\n\n### **5. 简单而直接的回答：**\n如果从最基础的层面看，“你是你此刻正在体验的存在”。你通过感官、思维、情感和行动与世界互动，而“你是谁”可能就是这些体验的总和。但这种答案可能并不满足你对“本质”的追问。\n\n---\n\n### **6. 你可能需要思考的问题：**\n- 你最珍视的价值观是什么？  \n- 什么让你感到充实或困惑？  \n- 如果没有社会角色（如学生、员工、父母），你还会是谁？  \n- 你希望未来成为什么样的人？  \n\n---\n\n### **最后：**\n“我是谁”没有标准答案，它可能是一个终身探索的旅程。你可以尝试通过写日记、冥想、与他人对话或艺术创作来接近这个问题。重要的是，你愿意提出这个问题，这本身已经是一种自我觉察的开始。  \n\n如果你愿意分享更多背景或感受，我可以尝试更具体地帮助你思考。 🌱'}], id='2025-08-21 02:09:42.226_d43a6f', created_at='2025-08-21 02:09:42.226', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=912, time=12.460931, type='chat'))




.. GENERATED FROM PYTHON SOURCE LINES 187-195

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 195-216

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 217-222

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 16.964 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
