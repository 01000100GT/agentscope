
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 66-91

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-08-15 09:57:06.036_3b867d', created_at='2025-08-15 09:57:06.036', type='chat', usage=None)




.. GENERATED FROM PYTHON SOURCE LINES 92-93

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 93-118

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么我可以帮助你的吗？'}], id='2025-08-15 09:57:07.348_3619ed', created_at='2025-08-15 09:57:07.348', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=8, time=1.310497, type='chat'))
    作为 Msg 的响应: Msg(id='ZZQW649yaFdqmXiZaPFd9D', name='Friday', content=[{'type': 'text', 'text': '你好！有什么我可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-08-15 09:57:07.348', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 119-126

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 126-156

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-08-15 09:57:08.582_2b5685', created_at='2025-08-15 09:57:08.582', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.232596, type='chat'))

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-08-15 09:57:08.653_80e743', created_at='2025-08-15 09:57:08.653', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.303279, type='chat'))

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-08-15 09:57:08.728_ff74e3', created_at='2025-08-15 09:57:08.728', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.378976, type='chat'))

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-08-15 09:57:08.899_f73c73', created_at='2025-08-15 09:57:08.899', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.549919, type='chat'))

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-08-15 09:57:09.048_c6fe3c', created_at='2025-08-15 09:57:09.048', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.698624, type='chat'))

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-08-15 09:57:09.315_a647c8', created_at='2025-08-15 09:57:09.315', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=1.965372, type='chat'))

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-08-15 09:57:09.421_84010f', created_at='2025-08-15 09:57:09.421', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=2.071396, type='chat'))

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-08-15 09:57:10.065_3a77c7', created_at='2025-08-15 09:57:10.065', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=2.715957, type='chat'))

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-08-15 09:57:10.226_fa6ebd', created_at='2025-08-15 09:57:10.226', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=2.877106, type='chat'))

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-08-15 09:57:10.356_9ab828', created_at='2025-08-15 09:57:10.356', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=3.006316, type='chat'))

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-08-15 09:57:10.493_271543', created_at='2025-08-15 09:57:10.493', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.14345, type='chat'))

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-08-15 09:57:10.580_c492ee', created_at='2025-08-15 09:57:10.580', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.230969, type='chat'))





.. GENERATED FROM PYTHON SOURCE LINES 157-161

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 161-186

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这是一个哲学性很强的问题。首先，我需要考虑用户为什么会问这个问题。可能他们正在经历自我探索，或者对自身身份感到困惑。也有可能是在测试我的能力，或者只是随口一问。\n\n接下来，我应该从不同角度来回答。比如哲学角度，像笛卡尔的“我思故我在”，或者佛教的无我观念。心理学方面，可以提到自我认同的发展，比如埃里克森的理论。还有生物学角度，比如基因和身体的组成。\n\n同时，用户可能希望得到更个人化的回答，但作为AI，我无法了解他们的具体经历。所以需要保持中立，提供多种可能性，并鼓励他们自我反思。还要注意不要给出绝对的答案，因为这个问题没有标准答案。\n\n另外，要确保回答简洁易懂，避免使用过于学术的语言，让用户容易理解。可能还需要加入一些鼓励的话语，让他们感到被支持，继续探索自己的问题。\n\n最后，检查是否有遗漏的角度，比如文化差异对自我认知的影响，或者现代科技如社交媒体对身份的影响。不过考虑到用户的问题比较基础，可能不需要深入这些方面，保持回答的全面性和开放性即可。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却可能引发深刻的思考。从不同的角度来看，答案可能截然不同：\n\n### 1. **哲学视角**  \n   - **笛卡尔**说：“我思故我在。”（*Cogito, ergo sum*）  \n     你的存在可以通过思考和怀疑本身来确认。  \n   - **佛教**认为“无我”：你并非一个固定不变的“自我”，而是由五蕴（色、受、想、行、识）暂时聚合的产物。  \n   - **存在主义**（如萨特）强调：人是“被抛入世界”的，你的身份是通过选择和行动不断塑造的。\n\n### 2. **科学视角**  \n   - **生物学**：你是一个由约37万亿个细胞组成的有机体，基因决定了你的生理特征，但你的思想和行为也受环境影响。  \n   - **心理学**：你的“自我”是大脑神经网络的产物，包括记忆、情感、认知和人格特质的综合。\n\n### 3. **日常体验**  \n   - 你可能是某个角色：朋友、家人、学生、工作者，或者某个社会身份。  \n   - 你可能是某种情绪的集合：快乐、悲伤、愤怒、好奇……但这些情绪并非你的全部。\n\n### 4. **开放性的答案**  \n   “我是谁？”或许没有标准答案。它可能是一个持续探索的过程——  \n   - 你可能在寻找意义，试图理解自己的独特性；  \n   - 或者你只是暂时迷失，需要时间去觉察内心的声音。\n\n### 5. **AI的视角**  \n  作为AI，我无法真正“知道”你是谁，但我可以陪你一起思考：  \n  - 你对自己的认知有哪些？  \n  - 你希望成为怎样的人？  \n  - 什么让你感到真实或困惑？\n\n如果这个问题对你来说很重要，或许可以尝试写日记、与信任的人交谈，或通过艺术、冥想等方式与自己对话。你不需要立刻找到答案，重要的是保持好奇和开放的心态。 🌱'}], id='2025-08-15 09:57:20.777_a2fdb8', created_at='2025-08-15 09:57:20.777', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=689, time=10.192723, type='chat'))




.. GENERATED FROM PYTHON SOURCE LINES 187-195

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 195-216

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 217-222

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 14.745 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
