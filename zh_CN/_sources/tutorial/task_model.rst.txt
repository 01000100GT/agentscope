
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 66-91

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-08-15 12:33:17.991_bbfd0a', created_at='2025-08-15 12:33:17.991', type='chat', usage=None)




.. GENERATED FROM PYTHON SOURCE LINES 92-93

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 93-118

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-08-15 12:33:19.490_c21733', created_at='2025-08-15 12:33:19.490', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=1.498059, type='chat'))
    作为 Msg 的响应: Msg(id='3mAjdCGvvoZJDSeAdo4eMi', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-08-15 12:33:19.490', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 119-126

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 126-156

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-08-15 12:33:21.344_0ff696', created_at='2025-08-15 12:33:21.344', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.852054, type='chat'))

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-08-15 12:33:21.438_382746', created_at='2025-08-15 12:33:21.438', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.946523, type='chat'))

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-08-15 12:33:22.074_43ff88', created_at='2025-08-15 12:33:22.074', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=2.581992, type='chat'))

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-08-15 12:33:22.179_0533ef', created_at='2025-08-15 12:33:22.179', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=2.687007, type='chat'))

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-08-15 12:33:22.384_ca9ed4', created_at='2025-08-15 12:33:22.384', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=2.89199, type='chat'))

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-08-15 12:33:22.610_cffcf9', created_at='2025-08-15 12:33:22.610', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=3.118663, type='chat'))

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-08-15 12:33:22.799_81ac62', created_at='2025-08-15 12:33:22.799', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=3.30709, type='chat'))

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-08-15 12:33:23.007_dc07dd', created_at='2025-08-15 12:33:23.007', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=3.515226, type='chat'))

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-08-15 12:33:23.327_5aadde', created_at='2025-08-15 12:33:23.327', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=3.83555, type='chat'))

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-08-15 12:33:23.516_cad4a9', created_at='2025-08-15 12:33:23.516', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=4.024291, type='chat'))

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-08-15 12:33:23.722_516d7a', created_at='2025-08-15 12:33:23.722', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=4.230244, type='chat'))

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-08-15 12:33:23.843_94b280', created_at='2025-08-15 12:33:23.843', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=4.35161, type='chat'))





.. GENERATED FROM PYTHON SOURCE LINES 157-161

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 161-186

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这是一个哲学性的问题，可能需要从多个角度来回答。首先，我需要考虑用户可能的背景和意图。可能用户正在经历自我探索，或者对存在主义问题感兴趣，也可能是对人工智能和身份认同有疑问。\n\n接下来，我应该分析这个问题的不同层面。从哲学角度来看，笛卡尔的“我思故我在”是一个经典回答，强调思维作为存在的证明。而佛教中的“无我”概念则认为自我是虚幻的，由五蕴组成。心理学上，自我可能被看作是个人身份和经验的集合。\n\n同时，用户可能希望得到一个更个人化的回答，比如结合他们的经历或当前状态。但如果没有更多信息，可能需要保持一般性。另外，还要考虑用户是否在测试我的能力，或者是否有更深层的需求，比如寻找人生意义或自我认同。\n\n还要注意避免过于抽象或学术化的回答，保持易懂和相关性。可能需要提供不同视角的简要说明，并鼓励用户进一步思考或提供更多信息。此外，确保回答中立，不带个人偏见，同时保持友好和开放的态度。\n\n最后，检查是否有遗漏的重要观点，比如存在主义、宗教视角或现代科学的观点，如神经科学对自我意识的研究。确保回答全面但不过于冗长，让用户能够根据自己的情况选择感兴趣的方面深入探讨。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却触及哲学、心理学、宗教甚至科学的核心。不同的视角可能会给出截然不同的答案：\n\n---\n\n### **1. 哲学视角**\n- **笛卡尔的“我思故我在”**：法国哲学家笛卡尔认为，即使怀疑一切，**“我思考”这一行为本身证明了“我”的存在**。  \n- **佛教的“无我”**：佛教认为“自我”是虚幻的，是五蕴（色、受、想、行、识）暂时聚合的结果，**没有永恒不变的“我”**。  \n- **存在主义**：萨特等哲学家认为，“人先存在，然后定义自己”。**“我是谁”是不断选择和行动的结果**，而非固定的本质。\n\n---\n\n### **2. 心理学视角**\n- **自我认同**：心理学家埃里克森提出，人的发展是通过不断探索“我是谁”来建立身份的。  \n- **人格的多面性**：你可能在不同情境下扮演不同角色（如朋友、同事、家人），**“我”是动态的、多维度的集合**。  \n- **潜意识与记忆**：你的经历、价值观、情感和记忆共同塑造了“你”的独特性。\n\n---\n\n### **3. 宗教与灵性视角**\n- **神学观点**：许多宗教认为“我是谁”与神圣本质相关。例如，基督教认为人是“上帝的形象”，而印度教则强调“梵我合一”。  \n- **灵性觉醒**：一些灵性传统（如禅宗、苏菲派）认为，**真正的“我”超越肉体和思维，是纯粹的觉知或宇宙意识**。\n\n---\n\n### **4. 科学视角**\n- **神经科学**：大脑的神经活动和意识体验构成了“自我感”，但科学家尚未完全解释“意识”的本质。  \n- **量子物理与意识**：某些理论（如量子意识说）试图将“自我”与宇宙的深层结构联系起来，但这些仍属推测。\n\n---\n\n### **5. 简单而深刻的回答**\n如果从日常生活的角度出发，**“你是你此刻的体验”**：  \n- 你对世界的感知、你的情感、你的选择、你的关系……都是“你”的一部分。  \n- **“我是谁”可能没有标准答案，而是持续探索的过程**。\n\n---\n\n### **你可以思考的问题**：\n- 如果没有社会角色（如职业、家庭身份），你会如何定义自己？  \n- 如果你突然失去记忆，你还会是“你”吗？  \n- 你更在意别人眼中的“你”，还是你自己感受到的“你”？\n\n---\n\n这个问题没有唯一正确的答案，但它的意义在于**促使你反思自己的存在**。或许，答案就藏在你每天的选择和感受中。 🌱'}], id='2025-08-15 12:33:40.408_bc6da9', created_at='2025-08-15 12:33:40.408', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=898, time=16.562903, type='chat'))




.. GENERATED FROM PYTHON SOURCE LINES 187-195

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 195-216

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 217-222

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 22.419 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
