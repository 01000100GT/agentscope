
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 66-91

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-09-04 07:35:45.111_04c30e', created_at='2025-09-04 07:35:45.111', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 92-93

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 93-118

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], id='2025-09-04 07:35:46.585_c56956', created_at='2025-09-04 07:35:46.585', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=8, time=1.473036, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='MvQEgykEbta3rj8emSoQnZ', name='Friday', content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-09-04 07:35:46.585', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 119-126

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 126-156

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-04 07:35:47.682_739ce5', created_at='2025-09-04 07:35:47.682', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.095683, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-09-04 07:35:47.728_1c6979', created_at='2025-09-04 07:35:47.728', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.141068, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2'}], id='2025-09-04 07:35:47.774_c3d89e', created_at='2025-09-04 07:35:47.774', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=3, time=1.187634, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n'}], id='2025-09-04 07:35:47.821_abd723', created_at='2025-09-04 07:35:47.821', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=4, time=1.234417, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-09-04 07:35:48.006_aa06b1', created_at='2025-09-04 07:35:48.006', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.41998, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n'}], id='2025-09-04 07:35:48.237_f8ecfb', created_at='2025-09-04 07:35:48.237', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=12, time=1.650518, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n'}], id='2025-09-04 07:35:48.426_34a0c5', created_at='2025-09-04 07:35:48.426', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=16, time=1.839691, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-09-04 07:35:48.640_43023c', created_at='2025-09-04 07:35:48.640', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=2.053393, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n'}], id='2025-09-04 07:35:48.797_8b6d40', created_at='2025-09-04 07:35:48.797', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=24, time=2.210479, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n1'}], id='2025-09-04 07:35:48.981_d8aca0', created_at='2025-09-04 07:35:48.981', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=28, time=2.394974, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-09-04 07:35:49.389_cdbcac', created_at='2025-09-04 07:35:49.389', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=2.8027, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n'}], id='2025-09-04 07:35:49.599_464b1c', created_at='2025-09-04 07:35:49.599', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=36, time=3.012755, type='chat'), metadata=None)

    块 12
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n1'}], id='2025-09-04 07:35:49.769_5051e7', created_at='2025-09-04 07:35:49.769', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=40, time=3.182291, type='chat'), metadata=None)

    块 13
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-09-04 07:35:49.957_8509c8', created_at='2025-09-04 07:35:49.957', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=3.37006, type='chat'), metadata=None)

    块 14
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n'}], id='2025-09-04 07:35:50.146_e8a791', created_at='2025-09-04 07:35:50.146', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=48, time=3.55993, type='chat'), metadata=None)

    块 15
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-04 07:35:50.288_da82fe', created_at='2025-09-04 07:35:50.288', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.701078, type='chat'), metadata=None)

    块 16
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-04 07:35:50.309_f9202e', created_at='2025-09-04 07:35:50.309', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.722117, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 157-161

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 161-186

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这个问题看起来简单，但其实很深奥。首先，我需要确定用户为什么会问这个问题。可能的情况有很多种：可能是哲学思考，或者是在经历身份认同的困惑，或者是对自我认知的探索。也有可能用户只是在测试我的反应，或者有其他潜在的意图。\n\n接下来，我需要考虑如何回应。直接回答“你是你自己”可能太简单了，但用户可能需要更深入的探讨。根据哲学的角度，比如笛卡尔的“我思故我在”，或者佛教中的“无我”，不同的哲学体系有不同的解释。同时，心理学上，自我认同涉及个人的经历、社会角色和内在价值观。\n\n另外，用户可能没有明确表达他们的具体困扰，所以需要进一步询问以了解他们的背景。比如，他们是否在经历身份危机，或者对自我存在感到困惑。这时候，提供一个开放式的回应，鼓励他们详细说明情况，可能会更有帮助。\n\n还要注意用户的情绪状态。如果他们表现出焦虑或困惑，回应需要更加同理心，避免过于学术化的解释。同时，确保回答符合伦理规范，不提供可能有害的建议，比如自我怀疑或消极的结论。\n\n可能还需要考虑文化差异。不同文化对自我概念的理解不同，比如集体主义和个人主义社会的差异。但如果没有用户的具体信息，可能需要保持中立和普遍适用的回答。\n\n最后，确保回答结构清晰，先承认问题的复杂性，再提供不同角度的解释，最后邀请用户进一步说明需求。这样既专业又友好，能够引导用户更深入地交流。\n'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却触及人类存在的核心。它既是哲学的命题，也是每个人在生命不同阶段都会面对的自我探索。以下是一些可能的视角，或许能帮助你思考这个问题：\n\n---\n\n### 1. **从哲学角度看**  \n- **笛卡尔的“我思故我在”**：法国哲学家笛卡尔认为，即使怀疑一切，只要“我”在思考，就证明“我”的存在。你的存在本身是不可否认的。  \n- **佛教的“无我”**：佛教认为，“我”是五蕴（色、受、想、行、识）暂时聚合的假象，执着于“我”会带来痛苦。  \n- **存在主义**：萨特说“存在先于本质”，人通过选择和行动定义自己，而非被预先决定。\n\n---\n\n### 2. **从心理学角度看**  \n- **身份认同**：你可能是“学生”“工作者”“朋友”“家人”等角色的集合，但这些标签只是社会赋予的外在身份。  \n- **内在自我**：你可能通过价值观、信念、情感和记忆来定义自己。例如，你是否认为自己是善良的、勇敢的，或者追求自由的？  \n- **未完成的探索**：心理学家埃里克森提出，人的一生都在不断重构自我，而“我是谁”可能是一个终身的提问。\n\n---\n\n### 3. **从日常经验看**  \n- **你的独特性**：你的思维方式、兴趣爱好、经历和情感，构成了独一无二的你。  \n- **与他人的关系**：你可能通过与他人的互动（如爱、冲突、合作）来理解自己。  \n- **变化与成长**：你并非固定不变的“谁”，而是随着经历、学习和反思不断演变的个体。\n\n---\n\n### 4. **可能的困惑来源**  \n- **身份危机**：如果你感到迷茫，可能是因为社会期待、内在渴望或外部环境的冲突。  \n- **过度理性化**：试图用逻辑分析“我是谁”可能忽略情感和直觉的层面。  \n- **对“自我”的执着**：过度关注“我”可能导致焦虑，而放下执念或许能获得更广阔的视角。\n\n---\n\n### 5. **你可以尝试的问题**  \n- 如果没有“我是谁”的身份标签，我会是什么？  \n- 我最珍视的品质或信念是什么？  \n- 什么经历让我感到“真实”或“完整”？  \n- 如果没有人知道我是谁，我是否依然存在？\n\n---\n\n最终，“我是谁”没有标准答案，它更像是一个动态的旅程。或许不必急于找到结论，而是允许自己在探索中逐渐靠近更真实的自己。如果你愿意分享更多背景，我可以尝试更具体地帮助你分析。 🌱'}], id='2025-09-04 07:36:03.543_bb5681', created_at='2025-09-04 07:36:03.543', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=923, time=13.230633, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 187-195

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 195-216

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 217-222

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 18.436 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
