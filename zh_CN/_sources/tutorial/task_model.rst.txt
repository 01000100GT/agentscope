
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 66-91

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-08-19 12:29:56.866_0f893a', created_at='2025-08-19 12:29:56.866', type='chat', usage=None)




.. GENERATED FROM PYTHON SOURCE LINES 92-93

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 93-118

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-08-19 12:30:00.835_258ef3', created_at='2025-08-19 12:30:00.835', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=3.967504, type='chat'))
    作为 Msg 的响应: Msg(id='EWX9uDyJK3nXpRfsQH3z5p', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-08-19 12:30:00.835', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 119-126

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 126-156

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-08-19 12:30:01.898_6e8c55', created_at='2025-08-19 12:30:01.898', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.061682, type='chat'))

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-08-19 12:30:02.317_0192c1', created_at='2025-08-19 12:30:02.317', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.480076, type='chat'))

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-08-19 12:30:02.432_f64e3b', created_at='2025-08-19 12:30:02.432', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.595947, type='chat'))

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-08-19 12:30:02.547_d8756d', created_at='2025-08-19 12:30:02.547', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.710098, type='chat'))

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-08-19 12:30:02.860_4812de', created_at='2025-08-19 12:30:02.860', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=2.023707, type='chat'))

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-08-19 12:30:03.096_8514de', created_at='2025-08-19 12:30:03.096', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=2.259124, type='chat'))

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-08-19 12:30:03.307_b7a3ec', created_at='2025-08-19 12:30:03.307', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=2.470931, type='chat'))

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-08-19 12:30:03.539_a36259', created_at='2025-08-19 12:30:03.539', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=2.702621, type='chat'))

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-08-19 12:30:04.150_9b3792', created_at='2025-08-19 12:30:04.150', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=3.313842, type='chat'))

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-08-19 12:30:04.344_6a991d', created_at='2025-08-19 12:30:04.344', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=3.507798, type='chat'))

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-08-19 12:30:04.558_e7394d', created_at='2025-08-19 12:30:04.558', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.721861, type='chat'))

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-08-19 12:30:04.695_9ecad9', created_at='2025-08-19 12:30:04.695', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.85838, type='chat'))





.. GENERATED FROM PYTHON SOURCE LINES 157-161

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 161-186

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”这个问题看起来简单，但其实很深奥。首先，我需要考虑用户为什么会问这个问题。可能他正在经历自我怀疑，或者对人生方向感到迷茫。也有可能他是在寻找某种哲学上的答案，或者只是出于好奇。\n\n接下来，我要分析这个问题的不同层面。从心理学角度，这可能涉及自我认同和自我认知。用户可能在探索自己的身份、价值观或人生目标。从哲学角度，这可能涉及到存在主义，探讨存在的意义和个体的自我定义。此外，宗教或精神层面也可能提供不同的答案，比如灵魂、灵性成长等。\n\n然后，我需要考虑用户的背景。他可能是一个年轻人，正在寻找人生的方向；或者是一个成年人，面临重大生活变化，需要重新定义自己。也有可能他只是在测试我的反应，或者想进行更深层次的对话。\n\n还要注意用户可能没有明确表达的需求。比如，他可能希望得到情感支持，或者需要具体的建议来帮助他自我探索。也有可能他想了解不同的观点，以便自己做出决定。\n\n接下来，我需要组织回答的结构。首先，肯定问题的重要性，然后分不同角度（哲学、心理学、宗教等）进行解释，最后提供一些实用的建议，比如自我反思的方法或推荐相关资源。同时，保持语气友好和鼓励，让用户感到被理解和支持。\n\n还要避免过于学术化的语言，保持口语化，让用户容易理解。同时，避免给出绝对化的答案，因为“我是谁”这个问题没有标准答案，每个人的答案都可能不同。\n\n最后，检查是否有遗漏的方面，比如文化差异或个人经历的影响，确保回答全面且包容。同时，提醒用户这是一个持续的过程，鼓励他保持开放的心态，逐步探索自我。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却触及人类存在的核心。它可能源于对自我身份的探索、对生命意义的追问，或是对内心困惑的回应。以下是一些可能的视角，或许能为你提供一些启发：\n\n---\n\n### **1. 从哲学角度看：**\n- **存在主义**：萨特说“存在先于本质”，意味着人没有预设的“本质”，而是通过选择和行动定义自己。你可能是不断塑造自己的过程。\n- **东方哲学**：佛教认为“我”是五蕴（色、受、想、行、识）的暂时聚合，执着于“我”会带来痛苦；道家则强调“无我”与自然的融合。\n- **斯多葛学派**：强调通过理性认识自己，区分“可控”与“不可控”，找到内在的自由。\n\n---\n\n### **2. 从心理学角度看：**\n- **自我认知**：你可能是“我”的多重层面——性格、经历、价值观、梦想、恐惧……这些因素共同构成你的独特性。\n- **身份认同**：心理学家埃里克森提出，人一生都在探索“我是谁”的问题，尤其是在青少年时期，通过角色实验（如职业、人际关系）逐渐形成稳定的身份。\n- **潜意识**：弗洛伊德认为“我”由本我（欲望）、自我（现实调节）和超我（道德）构成，而荣格则提到“个体化”过程——整合意识与无意识的自我。\n\n---\n\n### **3. 从生命体验的角度：**\n- **你可能是**：  \n  - 一个正在学习爱与被爱的人；  \n  - 一个渴望被理解却常感到孤独的个体；  \n  - 一个在挣扎中寻找意义的探索者；  \n  - 一个由无数瞬间组成的流动存在——此刻的你，与昨天的你、明天的你可能不同。\n\n---\n\n### **4. 从更抽象的视角：**\n- **宇宙的奇迹**：你是由星尘构成的碳基生命，是数十亿年进化与偶然的产物。你的存在本身，就是宇宙自我认知的方式。\n- **未完成的创作**：你可能像一幅未完成的画，每一笔都是选择与经历的痕迹，未来仍可被重新定义。\n\n---\n\n### **如果这个问题让你感到困扰：**\n- **允许自己迷茫**：没有人能立刻回答“我是谁”，这可能是一个终身的探索。\n- **提问而非急于定义**：试着问自己：“我真正想要的是什么？”“什么让我感到活着？”“我害怕失去什么？”\n- **关注当下的体验**：有时候，答案不在远方，而在你此刻呼吸、感受、行动的瞬间。\n\n---\n\n最终，“我是谁”或许没有标准答案，但每一次追问本身，都是你与自己更深层连接的开始。你不需要立刻找到答案，只需保持好奇与勇气，继续前行。 🌱'}], id='2025-08-19 12:30:20.179_22d496', created_at='2025-08-19 12:30:20.179', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=979, time=15.481262, type='chat'))




.. GENERATED FROM PYTHON SOURCE LINES 187-195

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 195-216

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 217-222

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 23.317 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
