
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 66-91

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-09-03 01:57:05.797_33a0b3', created_at='2025-09-03 01:57:05.797', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 92-93

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 93-118

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], id='2025-09-03 01:57:07.305_f81d17', created_at='2025-09-03 01:57:07.305', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=8, time=1.507101, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='VLvfzc3nc3HzpUHsYN3DBu', name='Friday', content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-09-03 01:57:07.305', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 119-126

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 126-156

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-03 01:57:08.229_a3f002', created_at='2025-09-03 01:57:08.229', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=0.922, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-09-03 01:57:08.295_cd109f', created_at='2025-09-03 01:57:08.295', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=0.987895, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-09-03 01:57:08.359_b68ba6', created_at='2025-09-03 01:57:08.359', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.052428, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-09-03 01:57:08.445_af62f0', created_at='2025-09-03 01:57:08.445', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.13868, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-09-03 01:57:08.555_3f897e', created_at='2025-09-03 01:57:08.555', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.248514, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-09-03 01:57:08.702_e7f4e6', created_at='2025-09-03 01:57:08.702', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=1.395761, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-09-03 01:57:08.830_b017e9', created_at='2025-09-03 01:57:08.830', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=1.522875, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-09-03 01:57:08.962_0f9693', created_at='2025-09-03 01:57:08.962', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=1.655018, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-09-03 01:57:09.108_39dc87', created_at='2025-09-03 01:57:09.109', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=1.801801, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-09-03 01:57:09.217_e180b6', created_at='2025-09-03 01:57:09.217', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=1.910553, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-03 01:57:09.342_234519', created_at='2025-09-03 01:57:09.342', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.035618, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-03 01:57:09.419_02a94a', created_at='2025-09-03 01:57:09.419', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.112652, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 157-161

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 161-186

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这个问题看起来简单，但其实挺深奥的。首先，我需要确定用户为什么会问这个问题。可能的情况有很多种：可能是哲学思考，或者对自我身份感到困惑，或者只是随便问问。我需要考虑不同的可能性，然后给出合适的回应。\n\n接下来，我应该分析这个问题的层次。从心理学的角度，自我认知涉及个人的身份、价值观、经历等。而哲学上，这个问题可能涉及到存在主义，比如“我是谁”可能涉及到存在的本质。另外，宗教或精神层面也可能有不同的解释，比如灵魂、灵性等。\n\n然后，我需要考虑用户可能的背景。如果用户是学生，可能是在学习哲学或心理学；如果是普通人，可能是在生活中遇到了困惑。不过用户没有提供更多信息，所以我的回答需要保持开放和包容，避免假设。\n\n还要注意避免过于学术化的回答，保持口语化和易懂。同时，要确保回答中立，不带有个人偏见，尊重不同的观点。可能需要提到不同的角度，比如心理学、哲学、宗教，并建议用户根据自己的情况去探索。\n\n另外，用户可能希望得到一些引导，帮助他们思考这个问题。所以可以提供一些问题，比如“你认为自己有哪些特质？”或者“什么让你感到充实？”，鼓励用户自我反思。\n\n还要检查是否有文化或语境上的差异，确保回答适合不同背景的用户。最后，保持回答的结构清晰，分点说明不同的角度，并以友好的方式结束，邀请用户进一步交流。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却可能引发深刻的思考。它可能涉及多个层面的理解，以下是一些可能的视角：\n\n---\n\n### 1. **生物学层面**  \n从身体和基因的角度看，你是一个由细胞、器官、神经系统组成的生物体，拥有独特的DNA序列，是数百万年进化和个体经历共同塑造的结果。\n\n---\n\n### 2. **心理与意识层面**  \n你的“自我”可能由记忆、情感、思维模式、价值观和性格特征构成。心理学家荣格曾提出“个体化”概念，认为人需要通过整合内心的不同部分（如“面具”与“阴影”）来认识真正的自己。\n\n---\n\n### 3. **社会与关系层面**  \n你可能是某个家庭中的成员、朋友、同事，或社会角色（如学生、工作者）。这些身份在与他人互动中不断被定义和重塑。\n\n---\n\n### 4. **哲学与存在主义视角**  \n存在主义哲学家萨特说：“存在先于本质。” 你并非被预先定义的“谁”，而是通过选择、行动和责任不断创造自己的意义。  \n**“我是谁？”** 可能是一个开放的问题，答案取决于你如何生活、选择和回应世界。\n\n---\n\n### 5. **灵性或超越性视角**  \n一些灵性传统认为，“我”可能超越肉体和意识，是更深层的“本体”或“灵魂”。例如，佛教中“无我”的概念挑战对“自我”的执着，而东方哲学常强调与宇宙或更高意识的连接。\n\n---\n\n### 6. **日常生活的自我认知**  \n也许你此刻更关心的是：  \n- **你希望成为什么样的人？**  \n- **什么让你感到充实或困惑？**  \n- **你如何与他人建立联系？**  \n\n这些问题的答案可能比“我是谁”更贴近你当下的需求。\n\n---\n\n### 如果你正在寻找答案：  \n- **尝试自我反思**：写下你的价值观、兴趣、恐惧和梦想。  \n- **与他人对话**：倾听他人的视角，或许能帮助你看到自己的盲点。  \n- **探索未知**：通过旅行、艺术、阅读或新体验，接触不同的可能性。  \n\n“我是谁？”可能没有终极答案，但提问本身已经是成长的开始。你愿意分享更多背景吗？也许我们可以一起探索。 🌱'}], id='2025-09-03 01:57:18.581_cf5b02', created_at='2025-09-03 01:57:18.581', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=809, time=9.158488, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 187-195

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 195-216

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 217-222

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 12.786 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
