
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 66-91

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-08-26 10:08:26.665_1719e5', created_at='2025-08-26 10:08:26.665', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 92-93

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 93-118

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-08-26 10:08:27.833_709fe1', created_at='2025-08-26 10:08:27.833', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=1.167178, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='czDsvDy3yQ2VpVquSYW7Qp', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-08-26 10:08:27.834', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 119-126

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 126-156

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-08-26 10:08:28.691_e7d822', created_at='2025-08-26 10:08:28.691', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=0.855765, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-08-26 10:08:28.786_6afbc8', created_at='2025-08-26 10:08:28.786', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=0.950586, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-08-26 10:08:28.882_429f77', created_at='2025-08-26 10:08:28.882', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.046713, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-08-26 10:08:28.980_6df0a1', created_at='2025-08-26 10:08:28.980', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.14461, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-08-26 10:08:29.170_ea77c7', created_at='2025-08-26 10:08:29.170', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.33451, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-08-26 10:08:29.386_2ad247', created_at='2025-08-26 10:08:29.386', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=1.551157, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-08-26 10:08:29.559_240585', created_at='2025-08-26 10:08:29.559', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=1.724239, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-08-26 10:08:29.750_cab998', created_at='2025-08-26 10:08:29.750', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=1.915018, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-08-26 10:08:30.114_add879', created_at='2025-08-26 10:08:30.114', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=2.279097, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-08-26 10:08:30.287_fb2cc7', created_at='2025-08-26 10:08:30.287', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=2.451677, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-08-26 10:08:30.493_d1ac8e', created_at='2025-08-26 10:08:30.493', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.657819, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-08-26 10:08:30.706_240aff', created_at='2025-08-26 10:08:30.706', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.871292, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 157-161

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 161-186

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”这个问题看起来简单，但其实挺深奥的。首先，我需要确定用户为什么会问这个问题。可能他们正在经历自我怀疑，或者对自我身份有困惑。也有可能他们只是好奇，想探讨哲学层面的问题。\n\n接下来，我应该考虑不同的角度来回答这个问题。从哲学角度看，比如笛卡尔的“我思故我在”，或者佛教中的无我概念。心理学方面，可能涉及自我认知、身份认同的发展阶段。还有可能存在一些宗教或灵性的解释，比如灵魂、本体等。\n\n然后，用户可能没有明确说明他们的背景，所以需要保持回答的通用性，同时提供多方面的视角，让他们可以根据自己的情况去思考。同时，要避免过于专业化的术语，让回答更易懂。\n\n另外，用户可能希望得到情感上的支持，而不仅仅是信息。所以回答中应该包含同理心，表达理解，并鼓励他们进一步探索自己的身份。\n\n还要注意不要给出绝对的答案，因为“我是谁”这个问题没有标准答案，每个人都有不同的理解和体验。需要强调这是一个持续的过程，而不是一个固定的结论。\n\n最后，确保回答结构清晰，分点列出不同的角度，这样用户能更容易消化信息。同时，结尾可以引导用户思考更多相关的问题，促进他们的自我反思。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却蕴含着深刻的哲学、心理学和灵性探索。不同的人、不同的文化、不同的哲学体系可能会给出不同的答案。以下是一些可能的视角，或许能帮助你更深入地思考这个问题：\n\n---\n\n### **1. 哲学视角：**\n- **笛卡尔的“我思故我在”**  \n  法国哲学家笛卡尔认为，即使怀疑一切，只要“我”在思考，就证明“我”存在。因此，“我是谁”可以被简化为“我是一个思考的存在”。\n- **佛教的“无我”**  \n  佛教认为，“我”是五蕴（色、受、想、行、识）的暂时组合，没有永恒不变的“自我”。所谓的“我”只是因缘和合的幻象。\n- **存在主义**  \n  萨特说“存在先于本质”，人通过行动和选择定义自己。因此，“我是谁”取决于你如何选择生活、承担责任。\n\n---\n\n### **2. 心理学视角：**\n- **自我认知**  \n  心理学认为“我”是通过经验、记忆、社会关系和内在价值观逐渐形成的。你可能通过“我是谁”这个问题，探索自己的性格、兴趣、目标和价值观。\n- **身份认同**  \n  发展心理学指出，人在不同阶段（如青少年、成年）会不断重新定义“自我”，比如通过职业、家庭角色、社会身份等。\n\n---\n\n### **3. 灵性与宗教视角：**\n- **灵魂与本体**  \n  一些灵性传统认为，“我”是超越身体和思维的“灵性本体”或“灵魂”，而“我是谁”可能指向对“本源”的追问。\n- **道家思想**  \n  老子说“道可道，非常道”，“我”可能是“道”的一部分，或与万物一体的存在。\n- **基督教**  \n  《圣经》中提到“人是按神的形象造的”，“我是谁”可能与“我是神的儿女”这一身份相关。\n\n---\n\n### **4. 个人化探索：**\n- **你可能是一个**  \n  - 一个拥有独特经历、情感和思想的个体；  \n  - 一个与他人建立联系、创造意义的存在；  \n  - 一个不断成长、变化、学习的生命体。  \n- **问题本身可能隐藏着**  \n  - 对自我价值的怀疑；  \n  - 对人生方向的迷茫；  \n  - 对存在意义的追问。\n\n---\n\n### **5. 一种可能的回答：**\n“你是你此刻所体验的一切——你的思想、情感、记忆、关系，以及你对世界的感知。你是一个流动的、不断变化的存在，既是独立的个体，又是与宇宙、他人相连的整体。‘我是谁’的答案，或许不在于找到一个固定的定义，而在于持续地探索、接纳和创造。”\n\n---\n\n如果你愿意，可以尝试问自己一些问题来进一步探索：  \n- 我最珍视的价值观是什么？  \n- 我如何定义自己的幸福？  \n- 如果没有社会角色（如职业、家庭身份），我会是谁？  \n- 我的哪些特质是独一无二的？  \n\n这个问题没有标准答案，但每一次思考都可能让你更接近真实的自己。 🌱'}], id='2025-08-26 10:08:42.785_cb70e0', created_at='2025-08-26 10:08:42.785', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=975, time=12.074882, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 187-195

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 195-216

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 217-222

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 16.122 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
