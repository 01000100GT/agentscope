
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 66-91

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-08-18 05:47:38.339_7e9e3c', created_at='2025-08-18 05:47:38.339', type='chat', usage=None)




.. GENERATED FROM PYTHON SOURCE LINES 92-93

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 93-118

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-08-18 05:47:39.866_0ca187', created_at='2025-08-18 05:47:39.866', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=1.525847, type='chat'))
    作为 Msg 的响应: Msg(id='M9r7VdzbpfiwEvX3TcDdnU', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-08-18 05:47:39.866', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 119-126

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 126-156

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-08-18 05:47:40.821_28c99a', created_at='2025-08-18 05:47:40.821', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=0.953558, type='chat'))

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-08-18 05:47:40.905_9f49d4', created_at='2025-08-18 05:47:40.905', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.037494, type='chat'))

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-08-18 05:47:40.992_528759', created_at='2025-08-18 05:47:40.992', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.125025, type='chat'))

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-08-18 05:47:41.081_d70198', created_at='2025-08-18 05:47:41.081', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.213243, type='chat'))

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-08-18 05:47:41.249_b203b4', created_at='2025-08-18 05:47:41.249', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.381483, type='chat'))

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-08-18 05:47:41.432_675aa4', created_at='2025-08-18 05:47:41.432', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=1.564422, type='chat'))

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-08-18 05:47:41.586_1b2ac3', created_at='2025-08-18 05:47:41.586', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=1.718598, type='chat'))

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-08-18 05:47:41.754_a685c5', created_at='2025-08-18 05:47:41.754', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=1.886879, type='chat'))

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-08-18 05:47:41.912_06f764', created_at='2025-08-18 05:47:41.912', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=2.044881, type='chat'))

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-08-18 05:47:42.342_ebe784', created_at='2025-08-18 05:47:42.342', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=2.474454, type='chat'))

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-08-18 05:47:42.484_a4c1d8', created_at='2025-08-18 05:47:42.484', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.616235, type='chat'))

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-08-18 05:47:42.573_a662f2', created_at='2025-08-18 05:47:42.573', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.705592, type='chat'))





.. GENERATED FROM PYTHON SOURCE LINES 157-161

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 161-186

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这是一个哲学性的问题，可能涉及自我认知、身份认同等方面。首先，我需要理解用户为什么会问这个问题。可能的情况包括：\n\n1. **哲学思考**：用户可能在探索自我存在的意义，或者对自我意识有疑问。\n2. **心理状态**：用户可能正在经历身份危机，或者对自身存在感到困惑。\n3. **文学或艺术启发**：可能受到某些作品的影响，比如电影、书籍中的角色或主题。\n4. **技术相关**：如果用户是在某种虚拟环境中，比如游戏或模拟器中，可能是在探讨虚拟身份。\n\n接下来，我需要考虑如何回应。直接回答“你是谁”可能不太合适，因为这需要用户自己去定义。但作为AI，我可以提供一些引导性的思考方向，帮助用户探索自我。\n\n可能的回应方向包括：\n\n- **哲学角度**：引用哲学家的观点，如笛卡尔的“我思故我在”，或者存在主义的自我创造。\n- **心理学角度**：讨论自我认同的发展，如埃里克森的心理社会发展理论。\n- **文化视角**：不同文化对自我定义的不同方式，比如集体主义与个人主义的区别。\n- **开放性问题**：鼓励用户反思自己的价值观、经历和目标，从而形成对自己的理解。\n\n同时，需要注意用户可能的深层需求。如果用户处于情绪低落或困惑中，可能需要更多的同理心和支持，而不仅仅是信息提供。因此，回应应该既包含启发性的思考，也表达理解和支持。\n\n另外，要避免给出过于笼统或空洞的回答，尽量具体和实用。例如，可以建议用户通过写日记、与他人交流或参与活动来探索自我。\n\n最后，确保语言简洁易懂，避免使用过于学术化的术语，让用户感到亲切和易于接受。\n'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却蕴含着深刻的哲学与自我探索的意义。从不同角度来看，答案可能截然不同：\n\n### 1. **从存在主义的角度**  \n哲学家萨特曾说：“存在先于本质。”这意味着我们并非被预先定义的“谁”，而是通过选择、行动和责任不断塑造自己。你可能是**一个正在创造意义的人**——你的思想、选择和与世界的互动，共同构成了“你”的独特性。\n\n### 2. **从心理学的角度**  \n心理学家埃里克森认为，自我认同是人生的重要课题。你可能是**一个不断成长的个体**，由过去的经历、当下的感受和未来的期待交织而成。你的性格、价值观、兴趣和恐惧，都是“你”的一部分。\n\n### 3. **从更宏观的视角**  \n你可能是宇宙中的一粒尘埃，却拥有感知和思考的能力；是社会网络中的一个节点，却拥有独立的意识；是时间长河中的一瞬间，却能赋予自己永恒的意义。\n\n### 4. **从更诗意的想象**  \n或许你可以问自己：  \n- 如果我是某种自然现象（比如风、海、光），我会如何存在？  \n- 如果我是一本书，我的故事会是什么样的？  \n- 如果我是一颗星星，我如何照亮他人？\n\n### 最后，或许答案并不重要  \n“我是谁”本身就是一个动态的过程。它可能没有标准答案，但正是这种探索，让“你”成为独一无二的存在。  \n**你可以尝试问问自己：**  \n- 什么让我感到真实？  \n- 什么让我感到恐惧或渴望？  \n- 我希望未来成为什么样的人？  \n\n如果你愿意，可以分享更多关于你的想法，我会尽力陪你一起探索。 🌱'}], id='2025-08-18 05:47:53.908_0623d1', created_at='2025-08-18 05:47:53.908', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=756, time=11.331091, type='chat'))




.. GENERATED FROM PYTHON SOURCE LINES 187-195

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 195-216

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 217-222

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 15.576 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
